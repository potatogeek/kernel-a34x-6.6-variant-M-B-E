/* SPDX-License-Identifier: BSD-2-Clause */
/*
 * Copyright (c) 2023 MediaTek Inc.
 */

//[File]            : wf_top_cfg_vlp.h
//[Revision time]   : Fri Oct 18 16:41:59 2024
//[Description]     : This file is auto generated by CODA
//[Copyright]       : Copyright (C) 2024 Mediatek Incorportion. All rights reserved.

#ifndef __WF_TOP_CFG_VLP_REGS_H__
#define __WF_TOP_CFG_VLP_REGS_H__

#include "hal_common.h"

#ifdef __cplusplus
extern "C" {
#endif


//****************************************************************************
//
//                     WF_TOP_CFG_VLP CR Definitions                     
//
//****************************************************************************

#define WF_TOP_CFG_VLP_BASE                                    0x81021000u

#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_ADDR                   (WF_TOP_CFG_VLP_BASE + 0x000u) // 1000
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_ADDR                   (WF_TOP_CFG_VLP_BASE + 0x004u) // 1004
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_2_ADDR                   (WF_TOP_CFG_VLP_BASE + 0x008u) // 1008
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_ADDR                 (WF_TOP_CFG_VLP_BASE + 0x00Cu) // 100C
#define WF_TOP_CFG_VLP_WFSYS_VCORE_CTRL_0_ADDR                 (WF_TOP_CFG_VLP_BASE + 0x010u) // 1010
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_ADDR        (WF_TOP_CFG_VLP_BASE + 0x014u) // 1014
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_ADDR        (WF_TOP_CFG_VLP_BASE + 0x018u) // 1018
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_ADDR (WF_TOP_CFG_VLP_BASE + 0x01Cu) // 101C
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_ADDR         (WF_TOP_CFG_VLP_BASE + 0x020u) // 1020
#define WF_TOP_CFG_VLP_WFSYS_VLP_SLPCTL_CLK_CTRL_0_ADDR        (WF_TOP_CFG_VLP_BASE + 0x024u) // 1024
#define WF_TOP_CFG_VLP_WFSYS_VON_SLPCTL_CLK_CTRL_0_ADDR        (WF_TOP_CFG_VLP_BASE + 0x028u) // 1028
#define WF_TOP_CFG_VLP_WFSYS_VLP_MAC_CK_CTRL_0_ADDR            (WF_TOP_CFG_VLP_BASE + 0x02Cu) // 102C
#define WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_ADDR                   (WF_TOP_CFG_VLP_BASE + 0x030u) // 1030
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_ADDR             (WF_TOP_CFG_VLP_BASE + 0x034u) // 1034
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_ADDR             (WF_TOP_CFG_VLP_BASE + 0x038u) // 1038
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_ADDR       (WF_TOP_CFG_VLP_BASE + 0x03Cu) // 103C
#define WF_TOP_CFG_VLP_WFSYS_PREVENT_SLP_CTRL_0_ADDR           (WF_TOP_CFG_VLP_BASE + 0x040u) // 1040
#define WF_TOP_CFG_VLP_IRQ_MASK_0_ADDR                         (WF_TOP_CFG_VLP_BASE + 0x050u) // 1050
#define WF_TOP_CFG_VLP_IRQ_STATUS_0_ADDR                       (WF_TOP_CFG_VLP_BASE + 0x054u) // 1054
#define WF_TOP_CFG_VLP_EINT_MASK_0_ADDR                        (WF_TOP_CFG_VLP_BASE + 0x060u) // 1060
#define WF_TOP_CFG_VLP_EINT_STATUS_0_ADDR                      (WF_TOP_CFG_VLP_BASE + 0x064u) // 1064
#define WF_TOP_CFG_VLP_WFSYS_MCU_1ST_POWER_ON_SW_FLAG_ADDR     (WF_TOP_CFG_VLP_BASE + 0x070u) // 1070
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_ADDR             (WF_TOP_CFG_VLP_BASE + 0x074u) // 1074
#define WF_TOP_CFG_VLP_WFSYS_MCU_ROMCODE_INDEX_SW_FLAG_ADDR    (WF_TOP_CFG_VLP_BASE + 0x078u) // 1078
#define WF_TOP_CFG_VLP_WFSYS_PCIE_CFG_SPACE_DEBUG_SIDEBAND_0_ADDR (WF_TOP_CFG_VLP_BASE + 0x080u) // 1080
#define WF_TOP_CFG_VLP_WFSYS_PCIE_CFG_SPACE_DEBUG_SIDEBAND_1_ADDR (WF_TOP_CFG_VLP_BASE + 0x084u) // 1084
#define WF_TOP_CFG_VLP_WFSYS_FPGA_RSV_RW_ADDR                  (WF_TOP_CFG_VLP_BASE + 0x098u) // 1098
#define WF_TOP_CFG_VLP_WFSYS_FPGA_RSV_RO_ADDR                  (WF_TOP_CFG_VLP_BASE + 0x09Cu) // 109C
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_ADDR                (WF_TOP_CFG_VLP_BASE + 0x100u) // 1100
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_ADDR               (WF_TOP_CFG_VLP_BASE + 0x104u) // 1104
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR                (WF_TOP_CFG_VLP_BASE + 0x108u) // 1108
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_1_ADDR                (WF_TOP_CFG_VLP_BASE + 0x10Cu) // 110C
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_ADDR               (WF_TOP_CFG_VLP_BASE + 0x200u) // 1200
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_ADDR             (WF_TOP_CFG_VLP_BASE + 0x204u) // 1204
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_ADDR           (WF_TOP_CFG_VLP_BASE + 0x218u) // 1218
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_ADDR           (WF_TOP_CFG_VLP_BASE + 0x21Cu) // 121C
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_ADDR           (WF_TOP_CFG_VLP_BASE + 0x300u) // 1300
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_ADDR           (WF_TOP_CFG_VLP_BASE + 0x304u) // 1304
#define WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_ADDR         (WF_TOP_CFG_VLP_BASE + 0x400u) // 1400
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_DBG_OUT_ADDR             (WF_TOP_CFG_VLP_BASE + 0x800u) // 1800
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_DBG_OUT_ADDR           (WF_TOP_CFG_VLP_BASE + 0x804u) // 1804
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_DBG_OUT_ADDR       (WF_TOP_CFG_VLP_BASE + 0x808u) // 1808
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_DBG_OUT_ADDR (WF_TOP_CFG_VLP_BASE + 0x80Cu) // 180C
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_DBG_OUT_ADDR        (WF_TOP_CFG_VLP_BASE + 0x810u) // 1810
#define WF_TOP_CFG_VLP_VLP_SLPCTL_CKSEL_DBG_OUT_ADDR           (WF_TOP_CFG_VLP_BASE + 0x814u) // 1814
#define WF_TOP_CFG_VLP_VON_SLPCTL_CKSEL_DBG_OUT_ADDR           (WF_TOP_CFG_VLP_BASE + 0x818u) // 1818
#define WF_TOP_CFG_VLP_AOC_CTRL_DBG_OUT_ADDR                   (WF_TOP_CFG_VLP_BASE + 0x81Cu) // 181C
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_DBG_OUT_ADDR          (WF_TOP_CFG_VLP_BASE + 0x820u) // 1820
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_DBG_OUT_ADDR         (WF_TOP_CFG_VLP_BASE + 0x824u) // 1824
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_DBG_OUT_ADDR          (WF_TOP_CFG_VLP_BASE + 0x828u) // 1828
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_DBG_OUT_ADDR         (WF_TOP_CFG_VLP_BASE + 0x82Cu) // 182C
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_DBG_OUT_ADDR       (WF_TOP_CFG_VLP_BASE + 0x830u) // 1830
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_DBG_OUT_ADDR     (WF_TOP_CFG_VLP_BASE + 0x844u) // 1844
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_DBG_OUT_ADDR     (WF_TOP_CFG_VLP_BASE + 0x848u) // 1848
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_DBG_OUT_ADDR     (WF_TOP_CFG_VLP_BASE + 0x858u) // 1858
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_DBG_OUT_ADDR     (WF_TOP_CFG_VLP_BASE + 0x85Cu) // 185C
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_0_ADDR                (WF_TOP_CFG_VLP_BASE + 0xA00u) // 1A00
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_1_ADDR                (WF_TOP_CFG_VLP_BASE + 0xA04u) // 1A04
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_2_ADDR                (WF_TOP_CFG_VLP_BASE + 0xA08u) // 1A08
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_3_ADDR                (WF_TOP_CFG_VLP_BASE + 0xA0Cu) // 1A0C
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_4_ADDR                (WF_TOP_CFG_VLP_BASE + 0xA10u) // 1A10
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_5_ADDR                (WF_TOP_CFG_VLP_BASE + 0xA14u) // 1A14
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_0_ADDR             (WF_TOP_CFG_VLP_BASE + 0xD00u) // 1D00
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_ADDR             (WF_TOP_CFG_VLP_BASE + 0xD04u) // 1D04
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_ADDR             (WF_TOP_CFG_VLP_BASE + 0xD08u) // 1D08
#define WF_TOP_CFG_VLP_WFSYS_MCU_MONFLG_SEL_0_ADDR             (WF_TOP_CFG_VLP_BASE + 0xD0Cu) // 1D0C
#define WF_TOP_CFG_VLP_WFSYS_LIT_MONFLG_SEL_0_ADDR             (WF_TOP_CFG_VLP_BASE + 0xD10u) // 1D10
#define WF_TOP_CFG_VLP_DBG_FLAG_CTRL_0_ADDR                    (WF_TOP_CFG_VLP_BASE + 0xDA0u) // 1DA0
#define WF_TOP_CFG_VLP_DBG_FLAG_0_ADDR                         (WF_TOP_CFG_VLP_BASE + 0xDA4u) // 1DA4
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_WAY_EN_0_ADDR        (WF_TOP_CFG_VLP_BASE + 0xE00u) // 1E00
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_WAY_EN_0_ADDR    (WF_TOP_CFG_VLP_BASE + 0xE04u) // 1E04
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_WAY_EN_0_ADDR    (WF_TOP_CFG_VLP_BASE + 0xE08u) // 1E08
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ADDR        (WF_TOP_CFG_VLP_BASE + 0xE10u) // 1E10
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ADDR    (WF_TOP_CFG_VLP_BASE + 0xE14u) // 1E14
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ADDR    (WF_TOP_CFG_VLP_BASE + 0xE18u) // 1E18




/* =====================================================================================

  ---WFSYS_OSC_CTRL_0 (0x81021000 + 0x000u)---

    CR_FORCE_WFSYS_OSC_ON_HIGH[0] - (RW) To force wfsys_osc_on=1
                                     0: not force
                                     1: force
    CR_WFSYS_VLP_MAC_SW_32K_RDY_MASK[1] - (RW) To mask wfsys_vlp_mac_sw_32k_rdy for wfsys_osc_on
                                     0: un-mask
                                     1: mask
    CR_VLP_SLPCTL_CK_32K_SW_RDY_MASK[2] - (RW) To mask vlp_slpctl_ck_32k_sw_rdy for wfsys_osc_on
                                     0: un-mask
                                     1: mask
    CR_WF_OSC_RDY_FILTER_SETTING[6..3] - (RW) Filter window for wfsys_osc_on_ack when wfsys_osc_on change  from 0→1, how many T we don't sample wfsys_osc_on_ack.
                                     Range from 0~15 (@slpctl_ck)
    CR_WF_OSC_RDY_COMBO_OUT_EN[7] - (RW) To decide whether to monitor combo or sequential wf_osc_rdy
                                     0: sequential
                                     1: combo
    CR_WF_OSC_RDY_GLITCH_STATUS_IRQ_CLR[8] - (RW) To clear wf_osc_rdy error flag and irq, sw needs to write 1 clear then write 0 de-clear.
                                     0: not clear
                                     1: clear
    CR_WF_OSC_RDY_GLITCH_IRQ_EN[9] - (RW) To enable wf_osc_rdy_glitch_irq_b
                                     0: disable
                                     1: enable
    WF_OSC_RDY_GLITCH_STATUS[10] - (RO) Status of wf_osc_rdy_glitch_status
                                     0: glitch not happen
                                     1: glitch happen
    WF_OSC_RDY_GLITCH_IRQ_B[11]  - (RO) IRQ status of wf_osc_rdy_glitch_irq_b
                                     0: IRQ assert
                                     1: IRQ not assert
    WF_OSC_RDY_ENHANCE_DBG_OUT[19..12] - (RO) wf_osc_rdy_enhance_dbg_out
                                     [7]=ack_glitch_irq_b;
                                     [6]=ack_glitch_status;
                                     [5]=ack_stable_seq;
                                     [4]=ack_stable_combo;
                                     [3]=skip_counter;
                                     [2]=ack_check_pre;
                                     [1]=ack;
                                     [0]=req;
    RESERVED20[31..20]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_WF_OSC_RDY_ENHANCE_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_WF_OSC_RDY_ENHANCE_DBG_OUT_MASK 0x000FF000u                // WF_OSC_RDY_ENHANCE_DBG_OUT[19..12]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_WF_OSC_RDY_ENHANCE_DBG_OUT_SHFT 12u
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_WF_OSC_RDY_GLITCH_IRQ_B_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_WF_OSC_RDY_GLITCH_IRQ_B_MASK 0x00000800u                // WF_OSC_RDY_GLITCH_IRQ_B[11]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_WF_OSC_RDY_GLITCH_IRQ_B_SHFT 11u
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_WF_OSC_RDY_GLITCH_STATUS_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_WF_OSC_RDY_GLITCH_STATUS_MASK 0x00000400u                // WF_OSC_RDY_GLITCH_STATUS[10]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_WF_OSC_RDY_GLITCH_STATUS_SHFT 10u
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WF_OSC_RDY_GLITCH_IRQ_EN_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WF_OSC_RDY_GLITCH_IRQ_EN_MASK 0x00000200u                // CR_WF_OSC_RDY_GLITCH_IRQ_EN[9]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WF_OSC_RDY_GLITCH_IRQ_EN_SHFT 9u
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WF_OSC_RDY_GLITCH_STATUS_IRQ_CLR_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WF_OSC_RDY_GLITCH_STATUS_IRQ_CLR_MASK 0x00000100u                // CR_WF_OSC_RDY_GLITCH_STATUS_IRQ_CLR[8]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WF_OSC_RDY_GLITCH_STATUS_IRQ_CLR_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WF_OSC_RDY_COMBO_OUT_EN_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WF_OSC_RDY_COMBO_OUT_EN_MASK 0x00000080u                // CR_WF_OSC_RDY_COMBO_OUT_EN[7]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WF_OSC_RDY_COMBO_OUT_EN_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WF_OSC_RDY_FILTER_SETTING_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WF_OSC_RDY_FILTER_SETTING_MASK 0x00000078u                // CR_WF_OSC_RDY_FILTER_SETTING[6..3]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WF_OSC_RDY_FILTER_SETTING_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_VLP_SLPCTL_CK_32K_SW_RDY_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_VLP_SLPCTL_CK_32K_SW_RDY_MASK_MASK 0x00000004u                // CR_VLP_SLPCTL_CK_32K_SW_RDY_MASK[2]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_VLP_SLPCTL_CK_32K_SW_RDY_MASK_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WFSYS_VLP_MAC_SW_32K_RDY_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WFSYS_VLP_MAC_SW_32K_RDY_MASK_MASK 0x00000002u                // CR_WFSYS_VLP_MAC_SW_32K_RDY_MASK[1]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_WFSYS_VLP_MAC_SW_32K_RDY_MASK_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_FORCE_WFSYS_OSC_ON_HIGH_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_FORCE_WFSYS_OSC_ON_HIGH_MASK 0x00000001u                // CR_FORCE_WFSYS_OSC_ON_HIGH[0]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_0_CR_FORCE_WFSYS_OSC_ON_HIGH_SHFT 0u

/* =====================================================================================

  ---WFSYS_OSC_CTRL_1 (0x81021000 + 0x004u)---

    CR_WF_SUBSYS_OSC_ON_ERROR_CLR[0] - (RW) To clear wf_subsys_osc_on_error_latch, sw needs to write 1 clear then  write 0 de-clear.
                                     0: not clear
                                     1: clear
    CR_WF_SUBSYS_OSC_ON_DBC_CNT[6..1] - (RW) De-bounce window = cr_wf_subsys_osc_on_dbc_cnt x T @slpctl_ck
                                     Range from 0 to 63 (@slpctl_ck)
    CR_WF_SUBSYS_OSC_ON_DBC_EN[7] - (RW) De-bounce feature for wf_subsys_osc_on to avoid short wfsys_osc_on=0. Make sure wf_subsys_osc is low for specific timing window.
                                     0: disable
                                     1: enable
    WF_SUBSYS_OSC_ON_ERROR[8]    - (RO) Whether there is any wf_subsys_osc_on short 1 (|wf_subsys_osc_on_error_latch)
                                     0: not happen
                                     1: happen
    WF_SUBSYS_OSC_ON_ERROR_LATCH[24..9] - (RO) Which wf_subsys_osc_on short1
                                     [15]: rsv
                                     [14]: rsv
                                     [13]: rsv
                                     [12]: rsv
                                     [11]: rsv
                                     [10]:lit_wf_osc_en
                                     [9] :bn3_phy_dsp_wf_osc_en
                                     [8] :bn2_phy_dsp_wf_osc_en
                                     [7] :bn1_phy_dsp_wf_osc_en
                                     [6] :bn0_phy_dsp_wf_osc_en
                                     [5] :bn3_wf_osc_en
                                     [4] :bn2_wf_osc_en
                                     [3] :bn1_wf_osc_en
                                     [2] :bn0_wf_osc_en
                                     [1] :umac_wf_osc_en
                                     [0] :wf_mcu_osc_on_post
    RESERVED25[31..25]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_WF_SUBSYS_OSC_ON_ERROR_LATCH_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_WF_SUBSYS_OSC_ON_ERROR_LATCH_MASK 0x01FFFE00u                // WF_SUBSYS_OSC_ON_ERROR_LATCH[24..9]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_WF_SUBSYS_OSC_ON_ERROR_LATCH_SHFT 9u
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_WF_SUBSYS_OSC_ON_ERROR_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_WF_SUBSYS_OSC_ON_ERROR_MASK 0x00000100u                // WF_SUBSYS_OSC_ON_ERROR[8]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_WF_SUBSYS_OSC_ON_ERROR_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_CR_WF_SUBSYS_OSC_ON_DBC_EN_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_CR_WF_SUBSYS_OSC_ON_DBC_EN_MASK 0x00000080u                // CR_WF_SUBSYS_OSC_ON_DBC_EN[7]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_CR_WF_SUBSYS_OSC_ON_DBC_EN_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_CR_WF_SUBSYS_OSC_ON_DBC_CNT_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_CR_WF_SUBSYS_OSC_ON_DBC_CNT_MASK 0x0000007Eu                // CR_WF_SUBSYS_OSC_ON_DBC_CNT[6..1]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_CR_WF_SUBSYS_OSC_ON_DBC_CNT_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_CR_WF_SUBSYS_OSC_ON_ERROR_CLR_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_CR_WF_SUBSYS_OSC_ON_ERROR_CLR_MASK 0x00000001u                // CR_WF_SUBSYS_OSC_ON_ERROR_CLR[0]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_1_CR_WF_SUBSYS_OSC_ON_ERROR_CLR_SHFT 0u

/* =====================================================================================

  ---WFSYS_OSC_CTRL_2 (0x81021000 + 0x008u)---

    CR_WF_SUBSYS_OSC_ON_MASK[15..0] - (RW) wf_subsys_osc_on mask
                                     0: mask
                                     1: un-mask
                                     [15]: rsv
                                     [14]: rsv
                                     [13]: rsv
                                     [12]: rsv
                                     [11]: rsv
                                     [10]:lit_wf_osc_en
                                     [9] :bn3_phy_dsp_wf_osc_en
                                     [8] :bn2_phy_dsp_wf_osc_en
                                     [7] :bn1_phy_dsp_wf_osc_en
                                     [6] :bn0_phy_dsp_wf_osc_en
                                     [5] :bn3_wf_osc_en
                                     [4] :bn2_wf_osc_en
                                     [3] :bn1_wf_osc_en
                                     [2] :bn0_wf_osc_en
                                     [1] :umac_wf_osc_en
                                     [0] :wf_mcu_osc_on_post
    WF_SUBSYS_OSC_ON_DBG_OUT[31..16] - (RO) wf_subsys_osc_on status
                                     [15]: rsv
                                     [14]: rsv
                                     [13]: rsv
                                     [12]: rsv
                                     [11]: rsv
                                     [10]:lit_wf_osc_en
                                     [9] :bn3_phy_dsp_wf_osc_en
                                     [8] :bn2_phy_dsp_wf_osc_en
                                     [7] :bn1_phy_dsp_wf_osc_en
                                     [6] :bn0_phy_dsp_wf_osc_en
                                     [5] :bn3_wf_osc_en
                                     [4] :bn2_wf_osc_en
                                     [3] :bn1_wf_osc_en
                                     [2] :bn0_wf_osc_en
                                     [1] :umac_wf_osc_en
                                     [0] :wf_mcu_osc_on_post

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_2_WF_SUBSYS_OSC_ON_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_2_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_2_WF_SUBSYS_OSC_ON_DBG_OUT_MASK 0xFFFF0000u                // WF_SUBSYS_OSC_ON_DBG_OUT[31..16]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_2_WF_SUBSYS_OSC_ON_DBG_OUT_SHFT 16u
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_2_CR_WF_SUBSYS_OSC_ON_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_2_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_2_CR_WF_SUBSYS_OSC_ON_MASK_MASK 0x0000FFFFu                // CR_WF_SUBSYS_OSC_ON_MASK[15..0]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_2_CR_WF_SUBSYS_OSC_ON_MASK_SHFT 0u

/* =====================================================================================

  ---WFSYS_LPOSC_CTRL_0 (0x81021000 + 0x00Cu)---

    CR_FORCE_WFSYS_LPOSC_ON_HIGH[0] - (RW) To force wfsys_lposc_on=1
                                     0: not force
                                     1: force
    CR_VLP_SLPCTL_CK_OSC_SW_RDY_MASK[1] - (RW) To mask vlp_slpctl_ck_osc_sw_rdy_mask for wfsys_lposc_on
                                     0: un-mask
                                     1: mask
    CR_VON_SLPCTL_CK_OSC_SW_RDY_MASK[2] - (RW) To mask von_slpctl_ck_osc_sw_rdy_mask for wfsys_lposc_on
                                     0: un-mask
                                     1: mask
    CR_WF_LPOSC_RDY_FILTER_SETTING[6..3] - (RW) Filter window for wfsys_lposc_on_ack when wfsys_lposc_on change  from 0→1, how many T we don't sample wfsys_lposc_on_ack.
                                     Range from 0~15 (@slpctl_ck)
    CR_WF_LPOSC_RDY_COMBO_OUT_EN[7] - (RW) To decide whether to monitor combo or sequential wf_lposc_rdy
                                     0: sequential
                                     1: combo
    CR_WF_LPOSC_RDY_GLITCH_STATUS_IRQ_CLR[8] - (RW) To clear wf_lposc_rdy error flag and irq, sw needs to write 1 clear then write 0 de-clear.
                                     0: not clear
                                     1: clear
    CR_WF_LPOSC_RDY_GLITCH_IRQ_EN[9] - (RW) To enable wf_lposc_rdy_glitch_irq_b
                                     0: disable
                                     1: enable
    WF_LPOSC_RDY_GLITCH_STATUS[10] - (RO) Status of wf_lposc_rdy_glitch_status
                                     0: glitch not happen
                                     1: glitch happen
    WF_LPOSC_RDY_GLITCH_IRQ_B[11] - (RO) IRQ status of wf_lposc_rdy_glitch_irq_b
                                     0: IRQ assert
                                     1: IRQ not assert
    WF_LPOSC_RDY_ENHANCE_DBG_OUT[19..12] - (RO) wf_lposc_rdy_enhance_dbg_out
                                     [7]=ack_glitch_irq_b;
                                     [6]=ack_glitch_status;
                                     [5]=ack_stable_seq;
                                     [4]=ack_stable_combo;
                                     [3]=skip_counter;
                                     [2]=ack_check_pre;
                                     [1]=ack;
                                     [0]=req;
    CR_CONN_AON_SLPCTL_CK_OSC_SW_RDY_MASK[20] - (RW) To mask conn_aon_slpctl_ck_osc_sw_rdy_mask for wfsys_lposc_on
                                     0: un-mask
                                     1: mask
    RESERVED21[31..21]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_CONN_AON_SLPCTL_CK_OSC_SW_RDY_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_CONN_AON_SLPCTL_CK_OSC_SW_RDY_MASK_MASK 0x00100000u                // CR_CONN_AON_SLPCTL_CK_OSC_SW_RDY_MASK[20]
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_CONN_AON_SLPCTL_CK_OSC_SW_RDY_MASK_SHFT 20u
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_WF_LPOSC_RDY_ENHANCE_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_WF_LPOSC_RDY_ENHANCE_DBG_OUT_MASK 0x000FF000u                // WF_LPOSC_RDY_ENHANCE_DBG_OUT[19..12]
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_WF_LPOSC_RDY_ENHANCE_DBG_OUT_SHFT 12u
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_WF_LPOSC_RDY_GLITCH_IRQ_B_ADDR WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_WF_LPOSC_RDY_GLITCH_IRQ_B_MASK 0x00000800u                // WF_LPOSC_RDY_GLITCH_IRQ_B[11]
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_WF_LPOSC_RDY_GLITCH_IRQ_B_SHFT 11u
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_WF_LPOSC_RDY_GLITCH_STATUS_ADDR WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_WF_LPOSC_RDY_GLITCH_STATUS_MASK 0x00000400u                // WF_LPOSC_RDY_GLITCH_STATUS[10]
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_WF_LPOSC_RDY_GLITCH_STATUS_SHFT 10u
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_WF_LPOSC_RDY_GLITCH_IRQ_EN_ADDR WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_WF_LPOSC_RDY_GLITCH_IRQ_EN_MASK 0x00000200u                // CR_WF_LPOSC_RDY_GLITCH_IRQ_EN[9]
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_WF_LPOSC_RDY_GLITCH_IRQ_EN_SHFT 9u
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_WF_LPOSC_RDY_GLITCH_STATUS_IRQ_CLR_ADDR WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_WF_LPOSC_RDY_GLITCH_STATUS_IRQ_CLR_MASK 0x00000100u                // CR_WF_LPOSC_RDY_GLITCH_STATUS_IRQ_CLR[8]
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_WF_LPOSC_RDY_GLITCH_STATUS_IRQ_CLR_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_WF_LPOSC_RDY_COMBO_OUT_EN_ADDR WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_WF_LPOSC_RDY_COMBO_OUT_EN_MASK 0x00000080u                // CR_WF_LPOSC_RDY_COMBO_OUT_EN[7]
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_WF_LPOSC_RDY_COMBO_OUT_EN_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_WF_LPOSC_RDY_FILTER_SETTING_ADDR WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_WF_LPOSC_RDY_FILTER_SETTING_MASK 0x00000078u                // CR_WF_LPOSC_RDY_FILTER_SETTING[6..3]
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_WF_LPOSC_RDY_FILTER_SETTING_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_VON_SLPCTL_CK_OSC_SW_RDY_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_VON_SLPCTL_CK_OSC_SW_RDY_MASK_MASK 0x00000004u                // CR_VON_SLPCTL_CK_OSC_SW_RDY_MASK[2]
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_VON_SLPCTL_CK_OSC_SW_RDY_MASK_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_VLP_SLPCTL_CK_OSC_SW_RDY_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_VLP_SLPCTL_CK_OSC_SW_RDY_MASK_MASK 0x00000002u                // CR_VLP_SLPCTL_CK_OSC_SW_RDY_MASK[1]
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_VLP_SLPCTL_CK_OSC_SW_RDY_MASK_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_FORCE_WFSYS_LPOSC_ON_HIGH_ADDR WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_FORCE_WFSYS_LPOSC_ON_HIGH_MASK 0x00000001u                // CR_FORCE_WFSYS_LPOSC_ON_HIGH[0]
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_0_CR_FORCE_WFSYS_LPOSC_ON_HIGH_SHFT 0u

/* =====================================================================================

  ---WFSYS_VCORE_CTRL_0 (0x81021000 + 0x010u)---

    CR_FORCE_WFSYS_VCORE_ON_HIGH[0] - (RW) To force wfsys_vcore_on=1
                                     0: not force
                                     1: force
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_VCORE_CTRL_0_CR_FORCE_WFSYS_VCORE_ON_HIGH_ADDR WF_TOP_CFG_VLP_WFSYS_VCORE_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VCORE_CTRL_0_CR_FORCE_WFSYS_VCORE_ON_HIGH_MASK 0x00000001u                // CR_FORCE_WFSYS_VCORE_ON_HIGH[0]
#define WF_TOP_CFG_VLP_WFSYS_VCORE_CTRL_0_CR_FORCE_WFSYS_VCORE_ON_HIGH_SHFT 0u

/* =====================================================================================

  ---WFSYS_CONN_INFRA_REQ_CTRL_0 (0x81021000 + 0x014u)---

    CR_WF_CONN_INFRA_SW_REQ[0]   - (RW) wf_conn_infra_req sw mode value
                                     When cr_wf_conn_infra_req_sw_mode_sel=1, wf_conn_infra_req = cr_wf_conn_infra_sw_req
    CR_WF_CONN_INFRA_REQ_SW_MODE_SEL[1] - (RW) wf_conn_infra_req sw mode selection
                                     0: hw mode
                                     1: sw mode (wf_conn_infra_req=cr_wf_conn_infra_sw_req)
    CR_WF_CONN_INFRA_REQ_SEL[2]  - (RW) wf_conn_infra_req hw mode legacy mode selection
                                     0: dynamic mode, controlled by wf2conn_bus_access_detect_subsys_req
                                     1: legacy mode, controlled by wfsys_osc_on
    CR_WF_CONN_INFRA_RDY_FILTER_SETTING[6..3] - (RW) Filter window for wfsys_conn_infra_rdy  when wfsys_conn_infra_req change  from 0→1, how many T we don't sample wfsys_conn_infra_rdy.
                                     Range from 0~15 (@slpctl_ck)
    CR_WF_CONN_INFRA_RDY_COMBO_OUT_EN[7] - (RW) To decide whether to monitor combo or sequential wf_conn_infra_rdy
                                     0: sequential
                                     1: combo
    CR_WF_CONN_INFRA_RDY_GLITCH_STATUS_IRQ_CLR[8] - (RW) To clear wf_conn_infra_rdy error flag and irq, sw needs to write 1 clear then  write 0 de-clear.
                                     0: not clear
                                     1: clear
    CR_WF_CONN_INFRA_RDY_GLITCH_IRQ_EN[9] - (RW) To enable wf_conn_infra_rdy_glitch_irq_b
                                     0: disable
                                     1: enable
    WF_CONN_INFRA_RDY_GLITCH_STATUS[10] - (RO) Status of wf_conn_infra_rdy_glitch_status
                                     0: glitch not happen
                                     1: glitch happen
    WF_CONN_INFRA_RDY_GLITCH_IRQ_B[11] - (RO) IRQ status of wf_conn_infra_rdy_glitch_irq_b
                                     0: IRQ assert
                                     1: IRQ not assert
    WF_CONN_INFRA_RDY_ENHANCE_DBG_OUT[19..12] - (RO) wf_conn_infra_rdy_enhance_dbg_out
                                     [7]=ack_glitch_irq_b;
                                     [6]=ack_glitch_status;
                                     [5]=ack_stable_seq;
                                     [4]=ack_stable_combo;
                                     [3]=skip_counter;
                                     [2]=ack_check_pre;
                                     [1]=ack;
                                     [0]=req;
    CR_WF_CONN_INFRA_REQ_HW_DBC_OUTPUT_HIGH_COUNT_LIMIT[24..20] - (RW) To decide wf_conn_infra_req keep high at least how many T when  0 → 1 to void short 1
                                     To decide wf_conn_infra_req keep high at least how many T when 1→ 0 to avoid short 1
                                     Range from 0~31
    CR_WF_CONN_INFRA_REQ_HW_DBC_OUTPUT_LOW_COUNT_LIMIT[29..25] - (RW) To decide wf_conn_infra_req keep low  at least how many T when  1 → 0 to void short 0
                                     Range from 0~31
    RESERVED30[31..30]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_REQ_HW_DBC_OUTPUT_LOW_COUNT_LIMIT_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_REQ_HW_DBC_OUTPUT_LOW_COUNT_LIMIT_MASK 0x3E000000u                // CR_WF_CONN_INFRA_REQ_HW_DBC_OUTPUT_LOW_COUNT_LIMIT[29..25]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_REQ_HW_DBC_OUTPUT_LOW_COUNT_LIMIT_SHFT 25u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_REQ_HW_DBC_OUTPUT_HIGH_COUNT_LIMIT_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_REQ_HW_DBC_OUTPUT_HIGH_COUNT_LIMIT_MASK 0x01F00000u                // CR_WF_CONN_INFRA_REQ_HW_DBC_OUTPUT_HIGH_COUNT_LIMIT[24..20]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_REQ_HW_DBC_OUTPUT_HIGH_COUNT_LIMIT_SHFT 20u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_WF_CONN_INFRA_RDY_ENHANCE_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_WF_CONN_INFRA_RDY_ENHANCE_DBG_OUT_MASK 0x000FF000u                // WF_CONN_INFRA_RDY_ENHANCE_DBG_OUT[19..12]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_WF_CONN_INFRA_RDY_ENHANCE_DBG_OUT_SHFT 12u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_WF_CONN_INFRA_RDY_GLITCH_IRQ_B_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_WF_CONN_INFRA_RDY_GLITCH_IRQ_B_MASK 0x00000800u                // WF_CONN_INFRA_RDY_GLITCH_IRQ_B[11]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_WF_CONN_INFRA_RDY_GLITCH_IRQ_B_SHFT 11u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_WF_CONN_INFRA_RDY_GLITCH_STATUS_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_WF_CONN_INFRA_RDY_GLITCH_STATUS_MASK 0x00000400u                // WF_CONN_INFRA_RDY_GLITCH_STATUS[10]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_WF_CONN_INFRA_RDY_GLITCH_STATUS_SHFT 10u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_RDY_GLITCH_IRQ_EN_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_RDY_GLITCH_IRQ_EN_MASK 0x00000200u                // CR_WF_CONN_INFRA_RDY_GLITCH_IRQ_EN[9]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_RDY_GLITCH_IRQ_EN_SHFT 9u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_RDY_GLITCH_STATUS_IRQ_CLR_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_RDY_GLITCH_STATUS_IRQ_CLR_MASK 0x00000100u                // CR_WF_CONN_INFRA_RDY_GLITCH_STATUS_IRQ_CLR[8]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_RDY_GLITCH_STATUS_IRQ_CLR_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_RDY_COMBO_OUT_EN_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_RDY_COMBO_OUT_EN_MASK 0x00000080u                // CR_WF_CONN_INFRA_RDY_COMBO_OUT_EN[7]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_RDY_COMBO_OUT_EN_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_RDY_FILTER_SETTING_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_RDY_FILTER_SETTING_MASK 0x00000078u                // CR_WF_CONN_INFRA_RDY_FILTER_SETTING[6..3]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_RDY_FILTER_SETTING_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_REQ_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_REQ_SEL_MASK 0x00000004u                // CR_WF_CONN_INFRA_REQ_SEL[2]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_REQ_SEL_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_REQ_SW_MODE_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_REQ_SW_MODE_SEL_MASK 0x00000002u                // CR_WF_CONN_INFRA_REQ_SW_MODE_SEL[1]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_REQ_SW_MODE_SEL_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_SW_REQ_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_SW_REQ_MASK 0x00000001u                // CR_WF_CONN_INFRA_SW_REQ[0]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_0_CR_WF_CONN_INFRA_SW_REQ_SHFT 0u

/* =====================================================================================

  ---WFSYS_CONN_INFRA_REQ_CTRL_1 (0x81021000 + 0x018u)---

    CR_WF_CONN_INFRA_REQ_BN0_COEX_EN[0] - (RW) To decide whether bn0_wf_osc_en can wakeup conn_infra
                                     0: disable
                                     1: enable
    CR_WF_CONN_INFRA_REQ_BN1_COEX_EN[1] - (RW) To decide whether bn1_wf_osc_en can wakeup conn_infra
                                     0: disable
                                     1: enable
    CR_WF_CONN_INFRA_REQ_BN2_COEX_EN[2] - (RW) To decide whether bn2_wf_osc_en can wakeup conn_infra
                                     0: disable
                                     1: enable
    CR_WF_CONN_INFRA_REQ_BN3_COEX_EN[3] - (RW) To decide whether bn3_wf_osc_en can wakeup conn_infra
                                     0: disable
                                     1: enable
    CR_WF_CONN_INFRA_REQ_LIT_COEX_EN[4] - (RW) To decide whether lit_wf_osc_en can wakeup conn_infra
                                     0: disable
                                     1: enable
    RESERVED5[31..5]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_LIT_COEX_EN_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_LIT_COEX_EN_MASK 0x00000010u                // CR_WF_CONN_INFRA_REQ_LIT_COEX_EN[4]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_LIT_COEX_EN_SHFT 4u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_BN3_COEX_EN_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_BN3_COEX_EN_MASK 0x00000008u                // CR_WF_CONN_INFRA_REQ_BN3_COEX_EN[3]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_BN3_COEX_EN_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_BN2_COEX_EN_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_BN2_COEX_EN_MASK 0x00000004u                // CR_WF_CONN_INFRA_REQ_BN2_COEX_EN[2]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_BN2_COEX_EN_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_BN1_COEX_EN_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_BN1_COEX_EN_MASK 0x00000002u                // CR_WF_CONN_INFRA_REQ_BN1_COEX_EN[1]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_BN1_COEX_EN_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_BN0_COEX_EN_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_BN0_COEX_EN_MASK 0x00000001u                // CR_WF_CONN_INFRA_REQ_BN0_COEX_EN[0]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_CTRL_1_CR_WF_CONN_INFRA_REQ_BN0_COEX_EN_SHFT 0u

/* =====================================================================================

  ---WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0 (0x81021000 + 0x01Cu)---

    CR_WF_CONN_INFRA_BUS_PLL_SW_REQ[0] - (RW) wf_conn_infra_bus_pll_req sw mode value
                                     When cr_wf_conn_infra_bus_pll_req_sw_mode_sel=1, wf_conn_infra_bus_pll_req = cr_wf_conn_infra_bus_pll_sw_req
    CR_WF_CONN_INFRA_BUS_PLL_REQ_SW_MODE_SEL[1] - (RW) wf_conn_infra_bus_pll_req sw mode selection
                                     0: hw mode
                                     1: sw mode (wf_conn_infra_bus_pll_req=cr_wf_conn_infra_bus_pll_sw_req)
    CR_WF_CONN_INFRA_BUS_PLL_REQ_SEL[2] - (RW) wf_conn_infra_bus_pll_req hw mode legacy mode selection
                                     0: legacy mode
                                     1: dynamic mode
    CR_WF2CONN_BUSY_MASK[3]      - (RW) To mask wf2conn_busy, when mask and cr_wf_conn_infra_bus_pll_req_sel=1 means wfsys_conn_infra_bus_pll_req will always be 0
                                     0: mask
                                     1: un-mask
    CR_WFSYS_WBG_EN_PLL_MASK[4]  - (RW) To mask wfsys_wbg_en_pll for hw legacy mode, when cr_wfsys_wbg_en_pll_mask=0 means hw legacy mode depends on bnx_wf_pll_on
                                     0: mask
                                     1: un-mask
    CR_BN0_WF_PLL_ON_MASK[5]     - (RW) To mask bn0_wf_pll_on for wfsys_conn_infra_bus_pll_req
                                     0: mask
                                     1: un-mask
    CR_BN1_WF_PLL_ON_MASK[6]     - (RW) To mask bn1_wf_pll_on for wfsys_conn_infra_bus_pll_req
                                     0: mask
                                     1: un-mask
    CR_BN2_WF_PLL_ON_MASK[7]     - (RW) To mask bn2_wf_pll_on for wfsys_conn_infra_bus_pll_req
                                     0: mask
                                     1: un-mask
    CR_BN3_WF_PLL_ON_MASK[8]     - (RW) To mask bn3_wf_pll_on for wfsys_conn_infra_bus_pll_req
                                     0: mask
                                     1: un-mask
    CR_LIT_WF_PLL_ON_MASK[9]     - (RW) To mask lit_wf_pll_on for wfsys_conn_infra_bus_pll_req
                                     0: mask
                                     1: un-mask
    CR_WF_CONN_INFRA_BUS_PLL_REQ_DYNAMIC_DBC_OUTPUT_HIGH_COUNT_LIMIT[14..10] - (RW) To decide wf_conn_infra_bus_pll_req keep high at least how many T when  0 → 1 to void short 1
                                     To decide wf_conn_infra_bus_pll_req keep high at least how many T when 1→ 0 to avoid short 1
                                     Range from 0~31 (@slpctl_ck)
    CR_WF_CONN_INFRA_BUS_PLL_REQ_DYNAMIC_DBC_OUTPUT_LOW_COUNT_LIMIT[19..15] - (RW) To decide wf_conn_infra_bus_pll_req keep low  at least how many T when  1 → 0 to void short 0
                                     Range from 0~31 (@slpctl_ck)
    RESERVED20[31..20]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_REQ_DYNAMIC_DBC_OUTPUT_LOW_COUNT_LIMIT_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_REQ_DYNAMIC_DBC_OUTPUT_LOW_COUNT_LIMIT_MASK 0x000F8000u                // CR_WF_CONN_INFRA_BUS_PLL_REQ_DYNAMIC_DBC_OUTPUT_LOW_COUNT_LIMIT[19..15]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_REQ_DYNAMIC_DBC_OUTPUT_LOW_COUNT_LIMIT_SHFT 15u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_REQ_DYNAMIC_DBC_OUTPUT_HIGH_COUNT_LIMIT_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_REQ_DYNAMIC_DBC_OUTPUT_HIGH_COUNT_LIMIT_MASK 0x00007C00u                // CR_WF_CONN_INFRA_BUS_PLL_REQ_DYNAMIC_DBC_OUTPUT_HIGH_COUNT_LIMIT[14..10]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_REQ_DYNAMIC_DBC_OUTPUT_HIGH_COUNT_LIMIT_SHFT 10u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_LIT_WF_PLL_ON_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_LIT_WF_PLL_ON_MASK_MASK 0x00000200u                // CR_LIT_WF_PLL_ON_MASK[9]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_LIT_WF_PLL_ON_MASK_SHFT 9u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_BN3_WF_PLL_ON_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_BN3_WF_PLL_ON_MASK_MASK 0x00000100u                // CR_BN3_WF_PLL_ON_MASK[8]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_BN3_WF_PLL_ON_MASK_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_BN2_WF_PLL_ON_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_BN2_WF_PLL_ON_MASK_MASK 0x00000080u                // CR_BN2_WF_PLL_ON_MASK[7]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_BN2_WF_PLL_ON_MASK_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_BN1_WF_PLL_ON_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_BN1_WF_PLL_ON_MASK_MASK 0x00000040u                // CR_BN1_WF_PLL_ON_MASK[6]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_BN1_WF_PLL_ON_MASK_SHFT 6u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_BN0_WF_PLL_ON_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_BN0_WF_PLL_ON_MASK_MASK 0x00000020u                // CR_BN0_WF_PLL_ON_MASK[5]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_BN0_WF_PLL_ON_MASK_SHFT 5u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WFSYS_WBG_EN_PLL_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WFSYS_WBG_EN_PLL_MASK_MASK 0x00000010u                // CR_WFSYS_WBG_EN_PLL_MASK[4]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WFSYS_WBG_EN_PLL_MASK_SHFT 4u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF2CONN_BUSY_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF2CONN_BUSY_MASK_MASK 0x00000008u                // CR_WF2CONN_BUSY_MASK[3]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF2CONN_BUSY_MASK_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_REQ_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_REQ_SEL_MASK 0x00000004u                // CR_WF_CONN_INFRA_BUS_PLL_REQ_SEL[2]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_REQ_SEL_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_REQ_SW_MODE_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_REQ_SW_MODE_SEL_MASK 0x00000002u                // CR_WF_CONN_INFRA_BUS_PLL_REQ_SW_MODE_SEL[1]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_REQ_SW_MODE_SEL_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_SW_REQ_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_SW_REQ_MASK 0x00000001u                // CR_WF_CONN_INFRA_BUS_PLL_SW_REQ[0]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_CTRL_0_CR_WF_CONN_INFRA_BUS_PLL_SW_REQ_SHFT 0u

/* =====================================================================================

  ---WFSYS_WF2AP_BUS_REQ_CTRL_0 (0x81021000 + 0x020u)---

    CR_WF2AP_BUS_SW_REQ[0]       - (RW) wfsys_wf2ap_bus_req sw mode value
                                     When cr_wfsys_wf2ap_bus_req_sw_mode_sel=1, wfsys_wf2ap_bus_req = cr_wf2ap_busl_sw_req
    CR_WF2AP_BUS_REQ_SW_MODE_SEL[1] - (RW) wfsys_wf2ap_bus_req sw mode selection
                                     0: hw mode
                                     1: sw mode (wfsys_wf2ap_bus_req=cr_wf2ap_bus_sw_req)
    RESERVED2[2]                 - (RO) Reserved bits
    CR_WF2AP_BUS_ACCESS_DETECT_ACK_FILTER_SETTING[6..3] - (RW) Filter window for wfsys_wf2ap_bus_ack when wfsys_lposc_on change  from 0→1, how many T we don't sample wfsys_lposc_on_ack.
                                     Range from 0~15 (@slpctl_ck)
    CR_WF2AP_BUS_ACCESS_DETECT_ACK_COMBO_OUT_EN[7] - (RW) To decide whether to monitor combo or sequential wf2ap_bus_access_detect_ack
                                     0: sequential
                                     1: combo
    CR_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_STATUS_IRQ_CLR[8] - (RW) To clear wf2ap_bus_access_detect_ack error flag and irq, sw needs to write 1 clear then write 0 de-clear.
                                     0: not clear
                                     1: clear
    CR_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_IRQ_EN[9] - (RW) To enable wf2ap_bus_access_detect_ack_glitch_irq_b
                                     0: disable
                                     1: enable
    WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_STATUS[10] - (RO) Status of wf2ap_bus_access_detect_ack_glitch_status
                                     0: glitch not happen
                                     1: glitch happen
    WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_IRQ_B[11] - (RO) IRQ status of wf2ap_bus_access_detect_ack_glitch_irq_b
                                     0: IRQ assert
                                     1: IRQ not assert
    WF2AP_BUS_ACCESS_DETECT_ACK_ENHANCE_DBG_OUT[19..12] - (RO) wf2ap_bus_access_detect_ack_enhance_dbg_out
                                     [7]=ack_glitch_irq_b;
                                     [6]=ack_glitch_status;
                                     [5]=ack_stable_seq;
                                     [4]=ack_stable_combo;
                                     [3]=skip_counter;
                                     [2]=ack_check_pre;
                                     [1]=ack;
                                     [0]=req;
    RESERVED20[31..20]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_WF2AP_BUS_ACCESS_DETECT_ACK_ENHANCE_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_WF2AP_BUS_ACCESS_DETECT_ACK_ENHANCE_DBG_OUT_MASK 0x000FF000u                // WF2AP_BUS_ACCESS_DETECT_ACK_ENHANCE_DBG_OUT[19..12]
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_WF2AP_BUS_ACCESS_DETECT_ACK_ENHANCE_DBG_OUT_SHFT 12u
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_IRQ_B_ADDR WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_IRQ_B_MASK 0x00000800u                // WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_IRQ_B[11]
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_IRQ_B_SHFT 11u
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_STATUS_ADDR WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_STATUS_MASK 0x00000400u                // WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_STATUS[10]
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_STATUS_SHFT 10u
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_IRQ_EN_ADDR WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_IRQ_EN_MASK 0x00000200u                // CR_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_IRQ_EN[9]
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_IRQ_EN_SHFT 9u
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_STATUS_IRQ_CLR_ADDR WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_STATUS_IRQ_CLR_MASK 0x00000100u                // CR_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_STATUS_IRQ_CLR[8]
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_ACCESS_DETECT_ACK_GLITCH_STATUS_IRQ_CLR_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_ACCESS_DETECT_ACK_COMBO_OUT_EN_ADDR WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_ACCESS_DETECT_ACK_COMBO_OUT_EN_MASK 0x00000080u                // CR_WF2AP_BUS_ACCESS_DETECT_ACK_COMBO_OUT_EN[7]
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_ACCESS_DETECT_ACK_COMBO_OUT_EN_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_ACCESS_DETECT_ACK_FILTER_SETTING_ADDR WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_ACCESS_DETECT_ACK_FILTER_SETTING_MASK 0x00000078u                // CR_WF2AP_BUS_ACCESS_DETECT_ACK_FILTER_SETTING[6..3]
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_ACCESS_DETECT_ACK_FILTER_SETTING_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_REQ_SW_MODE_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_REQ_SW_MODE_SEL_MASK 0x00000002u                // CR_WF2AP_BUS_REQ_SW_MODE_SEL[1]
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_REQ_SW_MODE_SEL_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_SW_REQ_ADDR WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_SW_REQ_MASK 0x00000001u                // CR_WF2AP_BUS_SW_REQ[0]
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_CTRL_0_CR_WF2AP_BUS_SW_REQ_SHFT 0u

/* =====================================================================================

  ---WFSYS_VLP_SLPCTL_CLK_CTRL_0 (0x81021000 + 0x024u)---

    CR_VLP_SLPCTL_MANUAL_CKSEL[1..0] - (RW) vlp_slpctl_cksel_post sw mode value
                                     0: osc_ck
                                     1: f32k
                                     2: lposc_ck
    CR_VLP_SLPCTL_CKSEL_MANUAL_MODE[2] - (RW) vlp_slpctl_cksel_post manual mode selection
                                     0: hw mode
                                     1: sw mode
    CR_MASK_WF_LPOSC_RDY_FOR_CLOCK_SWITCH[3] - (RW) To mask wf_lposc_rdy for vlp slpctl_ck clock switch from f32k to lposc. Default we mask wf_lposc_rdy to pre-switch GFMUX to speedup wakeup latency.
                                     0: un-mask
                                     1: mask
    RESERVED4[31..4]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_VLP_SLPCTL_CLK_CTRL_0_CR_MASK_WF_LPOSC_RDY_FOR_CLOCK_SWITCH_ADDR WF_TOP_CFG_VLP_WFSYS_VLP_SLPCTL_CLK_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VLP_SLPCTL_CLK_CTRL_0_CR_MASK_WF_LPOSC_RDY_FOR_CLOCK_SWITCH_MASK 0x00000008u                // CR_MASK_WF_LPOSC_RDY_FOR_CLOCK_SWITCH[3]
#define WF_TOP_CFG_VLP_WFSYS_VLP_SLPCTL_CLK_CTRL_0_CR_MASK_WF_LPOSC_RDY_FOR_CLOCK_SWITCH_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_VLP_SLPCTL_CLK_CTRL_0_CR_VLP_SLPCTL_CKSEL_MANUAL_MODE_ADDR WF_TOP_CFG_VLP_WFSYS_VLP_SLPCTL_CLK_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VLP_SLPCTL_CLK_CTRL_0_CR_VLP_SLPCTL_CKSEL_MANUAL_MODE_MASK 0x00000004u                // CR_VLP_SLPCTL_CKSEL_MANUAL_MODE[2]
#define WF_TOP_CFG_VLP_WFSYS_VLP_SLPCTL_CLK_CTRL_0_CR_VLP_SLPCTL_CKSEL_MANUAL_MODE_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_VLP_SLPCTL_CLK_CTRL_0_CR_VLP_SLPCTL_MANUAL_CKSEL_ADDR WF_TOP_CFG_VLP_WFSYS_VLP_SLPCTL_CLK_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VLP_SLPCTL_CLK_CTRL_0_CR_VLP_SLPCTL_MANUAL_CKSEL_MASK 0x00000003u                // CR_VLP_SLPCTL_MANUAL_CKSEL[1..0]
#define WF_TOP_CFG_VLP_WFSYS_VLP_SLPCTL_CLK_CTRL_0_CR_VLP_SLPCTL_MANUAL_CKSEL_SHFT 0u

/* =====================================================================================

  ---WFSYS_VON_SLPCTL_CLK_CTRL_0 (0x81021000 + 0x028u)---

    CR_VON_SLPCTL_MANUAL_CKSEL[0] - (RW) von_slpctl_cksel_post sw mode value
                                     0: lposc_ck
                                     1: osc_ck
    CR_VON_SLPCTL_CKSEL_MANUAL_MODE[1] - (RW) von_slpctl_cksel_post manual mode selection
                                     0: hw mode
                                     1: sw mode
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_VON_SLPCTL_CLK_CTRL_0_CR_VON_SLPCTL_CKSEL_MANUAL_MODE_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLPCTL_CLK_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLPCTL_CLK_CTRL_0_CR_VON_SLPCTL_CKSEL_MANUAL_MODE_MASK 0x00000002u                // CR_VON_SLPCTL_CKSEL_MANUAL_MODE[1]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLPCTL_CLK_CTRL_0_CR_VON_SLPCTL_CKSEL_MANUAL_MODE_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_VON_SLPCTL_CLK_CTRL_0_CR_VON_SLPCTL_MANUAL_CKSEL_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLPCTL_CLK_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLPCTL_CLK_CTRL_0_CR_VON_SLPCTL_MANUAL_CKSEL_MASK 0x00000001u                // CR_VON_SLPCTL_MANUAL_CKSEL[0]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLPCTL_CLK_CTRL_0_CR_VON_SLPCTL_MANUAL_CKSEL_SHFT 0u

/* =====================================================================================

  ---WFSYS_VLP_MAC_CK_CTRL_0 (0x81021000 + 0x02Cu)---

    CR_WFSYS_VLP_MAC_USING_SLOW_CK_MANUAL[0] - (RW) wfsys_vlp_mac_using_slow_ck sw mode value
                                     0: osc_ck
                                     1: f32k
    CR_WFSYS_VLP_MAC_CK_MANUAL_MODE[1] - (RW) wfsys_vlp_mac_using_slow_ck manual mode selection
                                     0: hw mode
                                     1: sw mode
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_VLP_MAC_CK_CTRL_0_CR_WFSYS_VLP_MAC_CK_MANUAL_MODE_ADDR WF_TOP_CFG_VLP_WFSYS_VLP_MAC_CK_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VLP_MAC_CK_CTRL_0_CR_WFSYS_VLP_MAC_CK_MANUAL_MODE_MASK 0x00000002u                // CR_WFSYS_VLP_MAC_CK_MANUAL_MODE[1]
#define WF_TOP_CFG_VLP_WFSYS_VLP_MAC_CK_CTRL_0_CR_WFSYS_VLP_MAC_CK_MANUAL_MODE_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_VLP_MAC_CK_CTRL_0_CR_WFSYS_VLP_MAC_USING_SLOW_CK_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_VLP_MAC_CK_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VLP_MAC_CK_CTRL_0_CR_WFSYS_VLP_MAC_USING_SLOW_CK_MANUAL_MASK 0x00000001u                // CR_WFSYS_VLP_MAC_USING_SLOW_CK_MANUAL[0]
#define WF_TOP_CFG_VLP_WFSYS_VLP_MAC_CK_CTRL_0_CR_WFSYS_VLP_MAC_USING_SLOW_CK_MANUAL_SHFT 0u

/* =====================================================================================

  ---WFSYS_AOC_CTRL_0 (0x81021000 + 0x030u)---

    CR_AOCLHENB_MANUAL[0]        - (RW) AOCLHENB_off sw mode value
                                     0:0
                                     1:1
    CR_AOCISO_MANUAL[1]          - (RW) AOCISO_off sw mode value
                                     0: 0
                                     1: 1
    CR_AOC_CTRL_MANUAL_MODE[2]   - (RW) AOCISO_off, AOCLHENB_off manual mode selection. SW mode is for TMBIST pattern.
                                     0: hw mode
                                     1: sw mode
    CR_AOC_CTRL_DELAY_TIME[6..3] - (RW) Control how many Ts of delay time  for AOCLHENB → AOCISO. (Spec > 35ns)
                                     Range 0~15
    RESERVED7[31..7]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_CR_AOC_CTRL_DELAY_TIME_ADDR WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_CR_AOC_CTRL_DELAY_TIME_MASK 0x00000078u                // CR_AOC_CTRL_DELAY_TIME[6..3]
#define WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_CR_AOC_CTRL_DELAY_TIME_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_CR_AOC_CTRL_MANUAL_MODE_ADDR WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_CR_AOC_CTRL_MANUAL_MODE_MASK 0x00000004u                // CR_AOC_CTRL_MANUAL_MODE[2]
#define WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_CR_AOC_CTRL_MANUAL_MODE_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_CR_AOCISO_MANUAL_ADDR  WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_CR_AOCISO_MANUAL_MASK  0x00000002u                // CR_AOCISO_MANUAL[1]
#define WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_CR_AOCISO_MANUAL_SHFT  1u
#define WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_CR_AOCLHENB_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_CR_AOCLHENB_MANUAL_MASK 0x00000001u                // CR_AOCLHENB_MANUAL[0]
#define WF_TOP_CFG_VLP_WFSYS_AOC_CTRL_0_CR_AOCLHENB_MANUAL_SHFT 0u

/* =====================================================================================

  ---WFSYS_PALDO_LPM_CTRL_0 (0x81021000 + 0x034u)---

    CR_WFSYS_PALDO_LPM_BN0_WF_PWR_ON_MANUAL[0] - (RW) paldo lpm BN0 sw mode value
                                     0: low power mode
                                     1: normal mode
    CR_WFSYS_PALDO_LPM_BN1_WF_PWR_ON_MANUAL[1] - (RW) paldo lpm BN1 sw mode value
                                     0: low power mode
                                     1: normal mode
    CR_WFSYS_PALDO_LPM_BN2_WF_PWR_ON_MANUAL[2] - (RW) paldo lpm BN2 sw mode value
                                     0: low power mode
                                     1: normal mode
    CR_WFSYS_PALDO_LPM_BN3_WF_PWR_ON_MANUAL[3] - (RW) paldo lpm BN3 sw mode value
                                     0: low power mode
                                     1: normal mode
    CR_WFSYS_PALDO_LPM_LIT_WF_PWR_ON_MANUAL[4] - (RW) paldo lpm LIT sw mode value
                                     0: low power mode
                                     1: normal mode
    CR_WFSYS_PALDO_LPM_BN0_WF_PWR_ON_MANUAL_SEL[5] - (RW) paldo lpm BN0 manual mode selection
                                     0:hw mode (=bn0_wf_pwr_on)
                                     1: sw mode (=cr_wfsys_paldo_lpm_bn0_wf_pwr_on_manual)
    CR_WFSYS_PALDO_LPM_BN1_WF_PWR_ON_MANUAL_SEL[6] - (RW) paldo lpm BN1 manual mode selection
                                     0:hw mode (=bn1_wf_pwr_on)
                                     1: sw mode (=cr_wfsys_paldo_lpm_bn1_wf_pwr_on_manual)
    CR_WFSYS_PALDO_LPM_BN2_WF_PWR_ON_MANUAL_SEL[7] - (RW) paldo lpm BN2 manual mode selection
                                     0:hw mode (=bn2_wf_pwr_on)
                                     1: sw mode (=cr_wfsys_paldo_lpm_bn2_wf_pwr_on_manual)
    CR_WFSYS_PALDO_LPM_BN3_WF_PWR_ON_MANUAL_SEL[8] - (RW) paldo lpm BN3 manual mode selection
                                     0:hw mode (=bn3_wf_pwr_on)
                                     1: sw mode (=cr_wfsys_paldo_lpm_bn3_wf_pwr_on_manual)
    CR_WFSYS_PALDO_LPM_LIT_WF_PWR_ON_MANUAL_SEL[9] - (RW) paldo lpm LIT manual mode selection
                                     0:hw mode (=lit_wf_pwr_on)
                                     1: sw mode (=cr_wfsys_paldo_lpm_lit_wf_pwr_on_manual)
    RESERVED10[31..10]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_LIT_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_LIT_WF_PWR_ON_MANUAL_SEL_MASK 0x00000200u                // CR_WFSYS_PALDO_LPM_LIT_WF_PWR_ON_MANUAL_SEL[9]
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_LIT_WF_PWR_ON_MANUAL_SEL_SHFT 9u
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN3_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN3_WF_PWR_ON_MANUAL_SEL_MASK 0x00000100u                // CR_WFSYS_PALDO_LPM_BN3_WF_PWR_ON_MANUAL_SEL[8]
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN3_WF_PWR_ON_MANUAL_SEL_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN2_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN2_WF_PWR_ON_MANUAL_SEL_MASK 0x00000080u                // CR_WFSYS_PALDO_LPM_BN2_WF_PWR_ON_MANUAL_SEL[7]
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN2_WF_PWR_ON_MANUAL_SEL_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN1_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN1_WF_PWR_ON_MANUAL_SEL_MASK 0x00000040u                // CR_WFSYS_PALDO_LPM_BN1_WF_PWR_ON_MANUAL_SEL[6]
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN1_WF_PWR_ON_MANUAL_SEL_SHFT 6u
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN0_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN0_WF_PWR_ON_MANUAL_SEL_MASK 0x00000020u                // CR_WFSYS_PALDO_LPM_BN0_WF_PWR_ON_MANUAL_SEL[5]
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN0_WF_PWR_ON_MANUAL_SEL_SHFT 5u
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_LIT_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_LIT_WF_PWR_ON_MANUAL_MASK 0x00000010u                // CR_WFSYS_PALDO_LPM_LIT_WF_PWR_ON_MANUAL[4]
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_LIT_WF_PWR_ON_MANUAL_SHFT 4u
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN3_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN3_WF_PWR_ON_MANUAL_MASK 0x00000008u                // CR_WFSYS_PALDO_LPM_BN3_WF_PWR_ON_MANUAL[3]
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN3_WF_PWR_ON_MANUAL_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN2_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN2_WF_PWR_ON_MANUAL_MASK 0x00000004u                // CR_WFSYS_PALDO_LPM_BN2_WF_PWR_ON_MANUAL[2]
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN2_WF_PWR_ON_MANUAL_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN1_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN1_WF_PWR_ON_MANUAL_MASK 0x00000002u                // CR_WFSYS_PALDO_LPM_BN1_WF_PWR_ON_MANUAL[1]
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN1_WF_PWR_ON_MANUAL_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN0_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN0_WF_PWR_ON_MANUAL_MASK 0x00000001u                // CR_WFSYS_PALDO_LPM_BN0_WF_PWR_ON_MANUAL[0]
#define WF_TOP_CFG_VLP_WFSYS_PALDO_LPM_CTRL_0_CR_WFSYS_PALDO_LPM_BN0_WF_PWR_ON_MANUAL_SHFT 0u

/* =====================================================================================

  ---WFSYS_BUCKR_1p2_CTRL_0 (0x81021000 + 0x038u)---

    CR_WF_BUCKR_1P2_REQ_BN0_WF_PWR_ON_MANUAL[0] - (RW) buckr 1p2 BN0 sw mode value
                                     0: 1.0v
                                     1: 1.2v
    CR_WF_BUCKR_1P2_REQ_BN1_WF_PWR_ON_MANUAL[1] - (RW) buckr 1p2 BN1 sw mode value
                                     0: 1.0v
                                     1: 1.2v
    CR_WF_BUCKR_1P2_REQ_BN2_WF_PWR_ON_MANUAL[2] - (RW) buckr 1p2 BN2 sw mode value
                                     0: 1.0v
                                     1: 1.2v
    CR_WF_BUCKR_1P2_REQ_BN3_WF_PWR_ON_MANUAL[3] - (RW) buckr 1p2 BN3 sw mode value
                                     0: 1.0v
                                     1: 1.2v
    CR_WF_BUCKR_1P2_REQ_LIT_WF_PWR_ON_MANUAL[4] - (RW) buckr 1p2 LIT sw mode value
                                     0: 1.0v
                                     1: 1.2v
    CR_WF_BUCKR_1P2_REQ_BN0_WF_PWR_ON_MANUAL_SEL[5] - (RW) buckr 1p2 BN0 manual mode selection
                                     0:hw mode (=bn0_wf_pwr_on)
                                     1: sw mode (=cr_wf_buckr_1p2_req_bn0_wf_pwr_on_manual)
    CR_WF_BUCKR_1P2_REQ_BN1_WF_PWR_ON_MANUAL_SEL[6] - (RW) buckr 1p2 BN1 manual mode selection
                                     0:hw mode (=bn1_wf_pwr_on)
                                     1: sw mode (=cr_wf_buckr_1p2_req_bn1_wf_pwr_on_manual)
    CR_WF_BUCKR_1P2_REQ_BN2_WF_PWR_ON_MANUAL_SEL[7] - (RW) buckr 1p2 BN2 manual mode selection
                                     0:hw mode (=bn2_wf_pwr_on)
                                     1: sw mode (=cr_wf_buckr_1p2_req_bn2_wf_pwr_on_manual)
    CR_WF_BUCKR_1P2_REQ_BN3_WF_PWR_ON_MANUAL_SEL[8] - (RW) buckr 1p2 BN3 manual mode selection
                                     0:hw mode (=bn3_wf_pwr_on)
                                     1: sw mode (=cr_wf_buckr_1p2_req_bn3_wf_pwr_on_manual)
    CR_WF_BUCKR_1P2_REQ_LIT_WF_PWR_ON_MANUAL_SEL[9] - (RW) buckr 1p2 LIT manual mode selection
                                     0:hw mode (=lit_wf_pwr_on)
                                     1: sw mode (=cr_wf_buckr_1p2_req_lit_wf_pwr_on_manual)
    RESERVED10[31..10]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_LIT_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_LIT_WF_PWR_ON_MANUAL_SEL_MASK 0x00000200u                // CR_WF_BUCKR_1P2_REQ_LIT_WF_PWR_ON_MANUAL_SEL[9]
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_LIT_WF_PWR_ON_MANUAL_SEL_SHFT 9u
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN3_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN3_WF_PWR_ON_MANUAL_SEL_MASK 0x00000100u                // CR_WF_BUCKR_1P2_REQ_BN3_WF_PWR_ON_MANUAL_SEL[8]
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN3_WF_PWR_ON_MANUAL_SEL_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN2_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN2_WF_PWR_ON_MANUAL_SEL_MASK 0x00000080u                // CR_WF_BUCKR_1P2_REQ_BN2_WF_PWR_ON_MANUAL_SEL[7]
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN2_WF_PWR_ON_MANUAL_SEL_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN1_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN1_WF_PWR_ON_MANUAL_SEL_MASK 0x00000040u                // CR_WF_BUCKR_1P2_REQ_BN1_WF_PWR_ON_MANUAL_SEL[6]
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN1_WF_PWR_ON_MANUAL_SEL_SHFT 6u
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN0_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN0_WF_PWR_ON_MANUAL_SEL_MASK 0x00000020u                // CR_WF_BUCKR_1P2_REQ_BN0_WF_PWR_ON_MANUAL_SEL[5]
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN0_WF_PWR_ON_MANUAL_SEL_SHFT 5u
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_LIT_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_LIT_WF_PWR_ON_MANUAL_MASK 0x00000010u                // CR_WF_BUCKR_1P2_REQ_LIT_WF_PWR_ON_MANUAL[4]
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_LIT_WF_PWR_ON_MANUAL_SHFT 4u
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN3_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN3_WF_PWR_ON_MANUAL_MASK 0x00000008u                // CR_WF_BUCKR_1P2_REQ_BN3_WF_PWR_ON_MANUAL[3]
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN3_WF_PWR_ON_MANUAL_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN2_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN2_WF_PWR_ON_MANUAL_MASK 0x00000004u                // CR_WF_BUCKR_1P2_REQ_BN2_WF_PWR_ON_MANUAL[2]
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN2_WF_PWR_ON_MANUAL_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN1_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN1_WF_PWR_ON_MANUAL_MASK 0x00000002u                // CR_WF_BUCKR_1P2_REQ_BN1_WF_PWR_ON_MANUAL[1]
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN1_WF_PWR_ON_MANUAL_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN0_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN0_WF_PWR_ON_MANUAL_MASK 0x00000001u                // CR_WF_BUCKR_1P2_REQ_BN0_WF_PWR_ON_MANUAL[0]
#define WF_TOP_CFG_VLP_WFSYS_BUCKR_1p2_CTRL_0_CR_WF_BUCKR_1P2_REQ_BN0_WF_PWR_ON_MANUAL_SHFT 0u

/* =====================================================================================

  ---WFSYS_LIGHT_LOAD_MODE_CTRL_0 (0x81021000 + 0x03Cu)---

    CR_WFSYS_LIGHT_LOAD_MODE_BN0_WF_PWR_ON_MANUAL[0] - (RW) light load mode BN0 sw mode value
                                     0: light load mode
                                     1: normal mode
    CR_WFSYS_LIGHT_LOAD_MODE_BN1_WF_PWR_ON_MANUAL[1] - (RW) light load mode BN1 sw mode value
                                     0: light load mode
                                     1: normal mode
    CR_WFSYS_LIGHT_LOAD_MODE_BN2_WF_PWR_ON_MANUAL[2] - (RW) light load mode BN2 sw mode value
                                     0: light load mode
                                     1: normal mode
    CR_WFSYS_LIGHT_LOAD_MODE_BN3_WF_PWR_ON_MANUAL[3] - (RW) light load mode BN3 sw mode value
                                     0: light load mode
                                     1: normal mode
    CR_WFSYS_LIGHT_LOAD_MODE_LIT_WF_PWR_ON_MANUAL[4] - (RW) light load mode LIT sw mode value
                                     0: light load mode
                                     1: normal mode
    CR_WFSYS_LIGHT_LOAD_MODE_BN0_WF_PWR_ON_MANUAL_SEL[5] - (RW) light load mode BN0 manual mode selection
                                     0:hw mode (=bn0_wf_pwr_on)
                                     1: sw mode (=cr_wfsys_light_load_mode_bn0_wf_pwr_on_manual)
    CR_WFSYS_LIGHT_LOAD_MODE_BN1_WF_PWR_ON_MANUAL_SEL[6] - (RW) light load mode BN1 manual mode selection
                                     0:hw mode (=bn1_wf_pwr_on)
                                     1: sw mode (=cr_wfsys_light_load_mode_bn1_wf_pwr_on_manual)
    CR_WFSYS_LIGHT_LOAD_MODE_BN2_WF_PWR_ON_MANUAL_SEL[7] - (RW) light load mode BN2 manual mode selection
                                     0:hw mode (=bn2_wf_pwr_on)
                                     1: sw mode (=cr_wfsys_light_load_mode_bn2_wf_pwr_on_manual)
    CR_WFSYS_LIGHT_LOAD_MODE_BN3_WF_PWR_ON_MANUAL_SEL[8] - (RW) light load mode BN3 manual mode selection
                                     0:hw mode (=bn3_wf_pwr_on)
                                     1: sw mode (=cr_wfsys_light_load_mode_bn3_wf_pwr_on_manual)
    CR_WFSYS_LIGHT_LOAD_MODE_LIT_WF_PWR_ON_MANUAL_SEL[9] - (RW) light load mode LIT manual mode selection
                                     0:hw mode (=lit_wf_pwr_on)
                                     1: sw mode (=cr_wfsys_light_load_mode_lit_wf_pwr_on_manual)
    RESERVED10[31..10]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_LIT_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_LIT_WF_PWR_ON_MANUAL_SEL_MASK 0x00000200u                // CR_WFSYS_LIGHT_LOAD_MODE_LIT_WF_PWR_ON_MANUAL_SEL[9]
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_LIT_WF_PWR_ON_MANUAL_SEL_SHFT 9u
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN3_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN3_WF_PWR_ON_MANUAL_SEL_MASK 0x00000100u                // CR_WFSYS_LIGHT_LOAD_MODE_BN3_WF_PWR_ON_MANUAL_SEL[8]
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN3_WF_PWR_ON_MANUAL_SEL_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN2_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN2_WF_PWR_ON_MANUAL_SEL_MASK 0x00000080u                // CR_WFSYS_LIGHT_LOAD_MODE_BN2_WF_PWR_ON_MANUAL_SEL[7]
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN2_WF_PWR_ON_MANUAL_SEL_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN1_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN1_WF_PWR_ON_MANUAL_SEL_MASK 0x00000040u                // CR_WFSYS_LIGHT_LOAD_MODE_BN1_WF_PWR_ON_MANUAL_SEL[6]
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN1_WF_PWR_ON_MANUAL_SEL_SHFT 6u
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN0_WF_PWR_ON_MANUAL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN0_WF_PWR_ON_MANUAL_SEL_MASK 0x00000020u                // CR_WFSYS_LIGHT_LOAD_MODE_BN0_WF_PWR_ON_MANUAL_SEL[5]
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN0_WF_PWR_ON_MANUAL_SEL_SHFT 5u
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_LIT_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_LIT_WF_PWR_ON_MANUAL_MASK 0x00000010u                // CR_WFSYS_LIGHT_LOAD_MODE_LIT_WF_PWR_ON_MANUAL[4]
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_LIT_WF_PWR_ON_MANUAL_SHFT 4u
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN3_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN3_WF_PWR_ON_MANUAL_MASK 0x00000008u                // CR_WFSYS_LIGHT_LOAD_MODE_BN3_WF_PWR_ON_MANUAL[3]
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN3_WF_PWR_ON_MANUAL_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN2_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN2_WF_PWR_ON_MANUAL_MASK 0x00000004u                // CR_WFSYS_LIGHT_LOAD_MODE_BN2_WF_PWR_ON_MANUAL[2]
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN2_WF_PWR_ON_MANUAL_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN1_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN1_WF_PWR_ON_MANUAL_MASK 0x00000002u                // CR_WFSYS_LIGHT_LOAD_MODE_BN1_WF_PWR_ON_MANUAL[1]
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN1_WF_PWR_ON_MANUAL_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN0_WF_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN0_WF_PWR_ON_MANUAL_MASK 0x00000001u                // CR_WFSYS_LIGHT_LOAD_MODE_BN0_WF_PWR_ON_MANUAL[0]
#define WF_TOP_CFG_VLP_WFSYS_LIGHT_LOAD_MODE_CTRL_0_CR_WFSYS_LIGHT_LOAD_MODE_BN0_WF_PWR_ON_MANUAL_SHFT 0u

/* =====================================================================================

  ---WFSYS_PREVENT_SLP_CTRL_0 (0x81021000 + 0x040u)---

    CR_WF_PREVENT_SLP_SW[0]      - (RW) wf_prevent_slp sw mode value
                                     0:0
                                     1:1
    CR_WF_PREVENT_SLP_SEL[1]     - (RW) wf_prevent_slp manual mode selection
                                     0: hw mode (=bn0_wf_prevent_slp|bn1_wf_prevent_slp|bn2_wf_prevent_slp|bn3_wf_prevent_slp|lit_wf_prevent_slp)
                                     1: sw mdoe (=cr_wf_prevent_slp_sw)
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_PREVENT_SLP_CTRL_0_CR_WF_PREVENT_SLP_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_PREVENT_SLP_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PREVENT_SLP_CTRL_0_CR_WF_PREVENT_SLP_SEL_MASK 0x00000002u                // CR_WF_PREVENT_SLP_SEL[1]
#define WF_TOP_CFG_VLP_WFSYS_PREVENT_SLP_CTRL_0_CR_WF_PREVENT_SLP_SEL_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_PREVENT_SLP_CTRL_0_CR_WF_PREVENT_SLP_SW_ADDR WF_TOP_CFG_VLP_WFSYS_PREVENT_SLP_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PREVENT_SLP_CTRL_0_CR_WF_PREVENT_SLP_SW_MASK 0x00000001u                // CR_WF_PREVENT_SLP_SW[0]
#define WF_TOP_CFG_VLP_WFSYS_PREVENT_SLP_CTRL_0_CR_WF_PREVENT_SLP_SW_SHFT 0u

/* =====================================================================================

  ---WF_TOP_CFG_VLP_IRQ_MASK_0 (0x81021000 + 0x050u)---

    CR_WF_TOP_CFG_VLP_IRQ_B_PRE_MASK[4..0] - (RW) To mask IRQ source
                                     0: un-mask
                                     1: mask
                                     [4]:von_slp_ctrl_state_timeout_irq_b
                                     [3]:wf_conn_infra_rdy_glitch_irq_b
                                     [2]:wf2ap_bus_access_detect_ack_glitch_irq_b
                                     [1]:wf_lposc_rdy_glitch_irq_b
                                     [0]:wf_osc_rdy_glitch_irq_b
    RESERVED5[31..5]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_IRQ_MASK_0_CR_WF_TOP_CFG_VLP_IRQ_B_PRE_MASK_ADDR WF_TOP_CFG_VLP_IRQ_MASK_0_ADDR
#define WF_TOP_CFG_VLP_IRQ_MASK_0_CR_WF_TOP_CFG_VLP_IRQ_B_PRE_MASK_MASK 0x0000001Fu                // CR_WF_TOP_CFG_VLP_IRQ_B_PRE_MASK[4..0]
#define WF_TOP_CFG_VLP_IRQ_MASK_0_CR_WF_TOP_CFG_VLP_IRQ_B_PRE_MASK_SHFT 0u

/* =====================================================================================

  ---WF_TOP_CFG_VLP_IRQ_STATUS_0 (0x81021000 + 0x054u)---

    WF_TOP_CFG_VLP_IRQ_STATUS[5..0] - (RO) IRQ status
                                     0: IRQ happens
                                     1: IRQ not happens
                                     [5]:wf_top_cfg_vlp_irq_b
                                     [4]:von_slp_ctrl_state_timeout_irq_b
                                     [3]:wf_conn_infra_rdy_glitch_irq_b
                                     [2]:wf2ap_bus_access_detect_ack_glitch_irq_b
                                     [1]:wf_lposc_rdy_glitch_irq_b
                                     [0]:wf_osc_rdy_glitch_irq_b
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_IRQ_STATUS_0_WF_TOP_CFG_VLP_IRQ_STATUS_ADDR WF_TOP_CFG_VLP_IRQ_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_IRQ_STATUS_0_WF_TOP_CFG_VLP_IRQ_STATUS_MASK 0x0000003Fu                // WF_TOP_CFG_VLP_IRQ_STATUS[5..0]
#define WF_TOP_CFG_VLP_IRQ_STATUS_0_WF_TOP_CFG_VLP_IRQ_STATUS_SHFT 0u

/* =====================================================================================

  ---WF_TOP_CFG_VLP_EINT_MASK_0 (0x81021000 + 0x060u)---

    CR_WF_TOP_CFG_VLP_EINT_B_PRE_MASK[5..0] - (RW) To mask EINT source
                                     0: un-mask
                                     1: mask
                                     [5]: wf_top_cfg_von_eint_b
                                     [4]:von_slp_ctrl_state_timeout_irq_b
                                     [3]:wf_conn_infra_rdy_glitch_irq_b
                                     [2]:wf2ap_bus_access_detect_ack_glitch_irq_b
                                     [1]:wf_lposc_rdy_glitch_irq_b
                                     [0]:wf_osc_rdy_glitch_irq_b
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_EINT_MASK_0_CR_WF_TOP_CFG_VLP_EINT_B_PRE_MASK_ADDR WF_TOP_CFG_VLP_EINT_MASK_0_ADDR
#define WF_TOP_CFG_VLP_EINT_MASK_0_CR_WF_TOP_CFG_VLP_EINT_B_PRE_MASK_MASK 0x0000003Fu                // CR_WF_TOP_CFG_VLP_EINT_B_PRE_MASK[5..0]
#define WF_TOP_CFG_VLP_EINT_MASK_0_CR_WF_TOP_CFG_VLP_EINT_B_PRE_MASK_SHFT 0u

/* =====================================================================================

  ---WF_TOP_CFG_VLP_EINT_STATUS_0 (0x81021000 + 0x064u)---

    WF_TOP_CFG_VLP_EINT_STATUS[6..0] - (RO) EINT status
                                     0: EINT happens
                                     1: EINT not happens
                                     [6]: wf_top_cfg_vlp_eint_b
                                     [5]: wf_top_cfg_von_eint_b
                                     [4]:von_slp_ctrl_state_timeout_irq_b
                                     [3]:wf_conn_infra_rdy_glitch_irq_b
                                     [2]:wf2ap_bus_access_detect_ack_glitch_irq_b
                                     [1]:wf_lposc_rdy_glitch_irq_b
                                     [0]:wf_osc_rdy_glitch_irq_b
    RESERVED7[31..7]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_EINT_STATUS_0_WF_TOP_CFG_VLP_EINT_STATUS_ADDR WF_TOP_CFG_VLP_EINT_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_EINT_STATUS_0_WF_TOP_CFG_VLP_EINT_STATUS_MASK 0x0000007Fu                // WF_TOP_CFG_VLP_EINT_STATUS[6..0]
#define WF_TOP_CFG_VLP_EINT_STATUS_0_WF_TOP_CFG_VLP_EINT_STATUS_SHFT 0u

/* =====================================================================================

  ---WFSYS_MCU_1ST_POWER_ON_SW_FLAG (0x81021000 + 0x070u)---

    WFSYS_MCU_1ST_POWER_ON_SW_FLAG[31..0] - (RW) SW CR for mcu 1st power on record (default magic number = 0x03345678, sw will write 0x12345678 after power on)

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_MCU_1ST_POWER_ON_SW_FLAG_WFSYS_MCU_1ST_POWER_ON_SW_FLAG_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_1ST_POWER_ON_SW_FLAG_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_1ST_POWER_ON_SW_FLAG_WFSYS_MCU_1ST_POWER_ON_SW_FLAG_MASK 0xFFFFFFFFu                // WFSYS_MCU_1ST_POWER_ON_SW_FLAG[31..0]
#define WF_TOP_CFG_VLP_WFSYS_MCU_1ST_POWER_ON_SW_FLAG_WFSYS_MCU_1ST_POWER_ON_SW_FLAG_SHFT 0u

/* =====================================================================================

  ---WFSYS_MCU_MISC_SW_FLAG (0x81021000 + 0x074u)---

    WFSYS_DRV_FW_STAT_SYNC_SW_FLAG[2..0] - (RW) SW CR
    WFSYS_BYPASS_PON_SW_FLAG[3]  - (RW) SW CR
    WFSYS_BYPASS_FWDL_SW_FLAG[4] - (RW) SW CR
    WFSYS_BYPASS_CALIBRATION_SW_FLAG[5] - (RW) SW CR
    WFSYS_BYPASS_SW_FLAG[6]      - (RW) SW CR
    RESERVED7[15..7]             - (RO) Reserved bits
    WFSYS_RESERVED_SW_FLAG[31..16] - (RW) SW CR (reserved)

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_RESERVED_SW_FLAG_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_RESERVED_SW_FLAG_MASK 0xFFFF0000u                // WFSYS_RESERVED_SW_FLAG[31..16]
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_RESERVED_SW_FLAG_SHFT 16u
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_BYPASS_SW_FLAG_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_BYPASS_SW_FLAG_MASK 0x00000040u                // WFSYS_BYPASS_SW_FLAG[6]
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_BYPASS_SW_FLAG_SHFT 6u
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_BYPASS_CALIBRATION_SW_FLAG_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_BYPASS_CALIBRATION_SW_FLAG_MASK 0x00000020u                // WFSYS_BYPASS_CALIBRATION_SW_FLAG[5]
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_BYPASS_CALIBRATION_SW_FLAG_SHFT 5u
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_BYPASS_FWDL_SW_FLAG_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_BYPASS_FWDL_SW_FLAG_MASK 0x00000010u                // WFSYS_BYPASS_FWDL_SW_FLAG[4]
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_BYPASS_FWDL_SW_FLAG_SHFT 4u
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_BYPASS_PON_SW_FLAG_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_BYPASS_PON_SW_FLAG_MASK 0x00000008u                // WFSYS_BYPASS_PON_SW_FLAG[3]
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_BYPASS_PON_SW_FLAG_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_DRV_FW_STAT_SYNC_SW_FLAG_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_DRV_FW_STAT_SYNC_SW_FLAG_MASK 0x00000007u                // WFSYS_DRV_FW_STAT_SYNC_SW_FLAG[2..0]
#define WF_TOP_CFG_VLP_WFSYS_MCU_MISC_SW_FLAG_WFSYS_DRV_FW_STAT_SYNC_SW_FLAG_SHFT 0u

/* =====================================================================================

  ---WFSYS_MCU_ROMCODE_INDEX_SW_FLAG (0x81021000 + 0x078u)---

    WFSYS_MCU_ROMCODE_INDEX_SW_FLAG[31..0] - (RW) SW CR for rom code debug

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_MCU_ROMCODE_INDEX_SW_FLAG_WFSYS_MCU_ROMCODE_INDEX_SW_FLAG_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_ROMCODE_INDEX_SW_FLAG_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_ROMCODE_INDEX_SW_FLAG_WFSYS_MCU_ROMCODE_INDEX_SW_FLAG_MASK 0xFFFFFFFFu                // WFSYS_MCU_ROMCODE_INDEX_SW_FLAG[31..0]
#define WF_TOP_CFG_VLP_WFSYS_MCU_ROMCODE_INDEX_SW_FLAG_WFSYS_MCU_ROMCODE_INDEX_SW_FLAG_SHFT 0u

/* =====================================================================================

  ---WFSYS_PCIE_CFG_SPACE_DEBUG_SIDEBAND_0 (0x81021000 + 0x080u)---

    CR_WF_BOOT_STAGE[3..0]       - (RW) For pcie cfg space debug usage
    RESERVED4[31..4]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_PCIE_CFG_SPACE_DEBUG_SIDEBAND_0_CR_WF_BOOT_STAGE_ADDR WF_TOP_CFG_VLP_WFSYS_PCIE_CFG_SPACE_DEBUG_SIDEBAND_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PCIE_CFG_SPACE_DEBUG_SIDEBAND_0_CR_WF_BOOT_STAGE_MASK 0x0000000Fu                // CR_WF_BOOT_STAGE[3..0]
#define WF_TOP_CFG_VLP_WFSYS_PCIE_CFG_SPACE_DEBUG_SIDEBAND_0_CR_WF_BOOT_STAGE_SHFT 0u

/* =====================================================================================

  ---WFSYS_PCIE_CFG_SPACE_DEBUG_SIDEBAND_1 (0x81021000 + 0x084u)---

    CR_WF_FW_VALID[0]            - (RW) For pcie cfg space debug usage
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_PCIE_CFG_SPACE_DEBUG_SIDEBAND_1_CR_WF_FW_VALID_ADDR WF_TOP_CFG_VLP_WFSYS_PCIE_CFG_SPACE_DEBUG_SIDEBAND_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PCIE_CFG_SPACE_DEBUG_SIDEBAND_1_CR_WF_FW_VALID_MASK 0x00000001u                // CR_WF_FW_VALID[0]
#define WF_TOP_CFG_VLP_WFSYS_PCIE_CFG_SPACE_DEBUG_SIDEBAND_1_CR_WF_FW_VALID_SHFT 0u

/* =====================================================================================

  ---WFSYS_FPGA_RSV_RW (0x81021000 + 0x098u)---

    WFSYS_FPGA_RSV_RW[31..0]     - (RW) For FPGA usage, RW register

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_FPGA_RSV_RW_WFSYS_FPGA_RSV_RW_ADDR WF_TOP_CFG_VLP_WFSYS_FPGA_RSV_RW_ADDR
#define WF_TOP_CFG_VLP_WFSYS_FPGA_RSV_RW_WFSYS_FPGA_RSV_RW_MASK 0xFFFFFFFFu                // WFSYS_FPGA_RSV_RW[31..0]
#define WF_TOP_CFG_VLP_WFSYS_FPGA_RSV_RW_WFSYS_FPGA_RSV_RW_SHFT 0u

/* =====================================================================================

  ---WFSYS_FPGA_RSV_RO (0x81021000 + 0x09Cu)---

    WFSYS_FPGA_RSV_RO[31..0]     - (RO) For FPGA usage, RO

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_FPGA_RSV_RO_WFSYS_FPGA_RSV_RO_ADDR WF_TOP_CFG_VLP_WFSYS_FPGA_RSV_RO_ADDR
#define WF_TOP_CFG_VLP_WFSYS_FPGA_RSV_RO_WFSYS_FPGA_RSV_RO_MASK 0xFFFFFFFFu                // WFSYS_FPGA_RSV_RO[31..0]
#define WF_TOP_CFG_VLP_WFSYS_FPGA_RSV_RO_WFSYS_FPGA_RSV_RO_SHFT 0u

/* =====================================================================================

  ---WFSYS_VON_RS_CTRL_0 (0x81021000 + 0x100u)---

    CR_WFSYS_VON_PWR_ON_MANUAL[0] - (RW) wfsys_von_pwr_on sw mode value
                                     0: power off
                                     1: power on
    CR_WFSYS_VON_PWR_ON_MANUAL_MODE[1] - (RW) wfsys_von_pwr_on manual mode selection
                                     0: hw mode
                                     1: sw mode
    CR_FORCE_WFSYS_VON_PWR_ON_REQ_HIGH[2] - (RW) Force wfsys_von_pwr_on_req high, wfsys_von_pwr_on_req will trigger rs_ctrl FSM to VON_REQ_PON state. This is used to force VON power on.
                                     0: not force power on
                                     1: force power on
    CR_FORCE_RDY_TO_PWR_ON_VON[3] - (RW) Force rdy_to_pwr_on_von. This is used to force power on VON criteria to “1” when wf_lposc_rdy is not as expected.
                                     0: not force
                                     1: force
    CR_WFSYS_VON_ABNORMAL_MASK[4] - (RW) To mask abnormal flag force wfsys_von_pwr_rdy_combo=1 function. If un-mask, when wfsys_von_abnormal=1 then wfsys_von_pwr_rdy_combo will be “1” so we can power on VCORE off mtcmos for debug.
                                     0: mask
                                     1: un-mask
    CR_WFSYS_VON_SLP_CNT_CLR[5]  - (RW) To clear wfsys_von_slp_cnt, sw needs to write 1 clear then write 0 de-clear.
                                     0: not clear
                                     1: clear
    WFSYS_VON_SLP_CNT[13..6]     - (RO) Indicate how many times VON mtcmos enter power down state.
                                     Range 0~255 (counter will park at 255 when counting to 255)
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_WFSYS_VON_SLP_CNT_ADDR WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_WFSYS_VON_SLP_CNT_MASK 0x00003FC0u                // WFSYS_VON_SLP_CNT[13..6]
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_WFSYS_VON_SLP_CNT_SHFT 6u
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_WFSYS_VON_SLP_CNT_CLR_ADDR WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_WFSYS_VON_SLP_CNT_CLR_MASK 0x00000020u                // CR_WFSYS_VON_SLP_CNT_CLR[5]
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_WFSYS_VON_SLP_CNT_CLR_SHFT 5u
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_WFSYS_VON_ABNORMAL_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_WFSYS_VON_ABNORMAL_MASK_MASK 0x00000010u                // CR_WFSYS_VON_ABNORMAL_MASK[4]
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_WFSYS_VON_ABNORMAL_MASK_SHFT 4u
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_VON_ADDR WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_VON_MASK 0x00000008u                // CR_FORCE_RDY_TO_PWR_ON_VON[3]
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_VON_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_FORCE_WFSYS_VON_PWR_ON_REQ_HIGH_ADDR WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_FORCE_WFSYS_VON_PWR_ON_REQ_HIGH_MASK 0x00000004u                // CR_FORCE_WFSYS_VON_PWR_ON_REQ_HIGH[2]
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_FORCE_WFSYS_VON_PWR_ON_REQ_HIGH_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_WFSYS_VON_PWR_ON_MANUAL_MODE_ADDR WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_WFSYS_VON_PWR_ON_MANUAL_MODE_MASK 0x00000002u                // CR_WFSYS_VON_PWR_ON_MANUAL_MODE[1]
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_WFSYS_VON_PWR_ON_MANUAL_MODE_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_WFSYS_VON_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_WFSYS_VON_PWR_ON_MANUAL_MASK 0x00000001u                // CR_WFSYS_VON_PWR_ON_MANUAL[0]
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_0_CR_WFSYS_VON_PWR_ON_MANUAL_SHFT 0u

/* =====================================================================================

  ---WFSYS_VON_SLP_CTRL_0 (0x81021000 + 0x104u)---

    CR_WFSYS_VON_LEGACY_SLEEP_EN[0] - (RW) VON legacy sleep enable. When cr_wfsys_von_legacy_sleep_en=1, VON slp_ctrl FSM will "not" enter VON_MTCMOS_OFF state that is VON mtcmos will keep on and reset will not be asserted.
                                     0: dsleep
                                     1: legacy sleep
    CR_FORCE_SKIP_WFSYS_VON_MEM_PON_STATE[1] - (RW) To skip VON_MEMORY_ON state check mem_pon=1 criteria. If set to “1” then sleep controller will still send wfsys_von_pon=1 to RGU and goto VON_RESTORE state. This is for debug usage, normal mode should always keep “0”
                                     0: not skip
                                     1: skip
    CR_FORCE_SKIP_WFSYS_VON_RESTORE_STATE[2] - (RW) To skip VON_RESTORE state. If set to “1” then sleep controller will “not” sent wfsys_von_restore_req=1 to cmdbt controller that is we will skip restore behavior and goto VON_DIS_AOC state. This is for debug usage, normal mode should always keep “0”
                                     0: not skip
                                     1: skip
    CR_FORCE_SKIP_WFSYS_VON_BACKUP_STATE[3] - (RW) To skip VON_BACKUP state. If set to “1” then sleep controller will “not” sent wfsys_von_backup_req=1 to cmdbt controller that is we will skip backup behavior and goto VON_MEMORY_OFF state. This is for debug usage, normal mode should always keep “0”
                                     0: not skip
                                     1: skip
    CR_MASK_WFSYS_VON_SLPPROT_RDY0_CHK[4] - (RW) To mask check slpprot_rdy=0 at VON_DIS_SLPPROT state. Default we “don't” check slpprot_rdy=0 when disabling slpprot because slpprot might be enable by another power domain.
                                     0: need to check slpprot_rdy=0
                                     1: don't need to check slpprot_rdy=0
    CR_MASK_WFSYS_VON_SLPPROT_RDY1_CHK[5] - (RW) To mask check slpprot_rdy=1 at VON_EN_SLPPROT state. Default we “must” check slpprot_rdy=1 when enabling slpprot because slpprot must be enabled before power down.
                                     0: need to check slpprot_rdy=1
                                     1: don't need to check slpprot_rdy=1
    CR_VON_SLP_CTRL_STATE_ABNORMAL_EN[6] - (RW) Decide whether to jump to VON_ABNORMAL state when von_slp_ctrl_state_timeout=1. VON_ABNORMAL state will force on mtcmos, memory, give up rs/bk and disable slpprot.
                                     0: will “not” goto VON_ABNORMAL state when von_slp_ctrl_state_timeout=1
                                     1: will goto VON_ABNORMAL state when von_slp_ctrl_state_timeout=1
    CR_VON_SLP_CTRL_STATE_TIMEOUT_EN[7] - (RW) To enable timeout function for von sleep controller. When timeout is enabled, if FSM stays at VON_MEMORY_ON/ VON_RESTORE/ VON_DIS_AOC/ VON_DIS_SLPPROT/ VON_EN_SLPPROT/ VON_EN_AOC/ VON_BACKUP/ VON_MEMORY_OFF state longer than cr_von_slp_ctrl_state_timeout_limit * T @f32k, von_slp_ctrl_state_timeout will trigger.
                                     0: disable
                                     1: enable
    CR_VON_SLP_CTRL_STATE_TIMEOUT_CLR[8] - (RW) To clear von_slp_ctrl_state_timeout, sw needs to write 1 clear then  write 0 de-clear.
                                     0: not clear
                                     1: clear
    CR_VON_SLP_CTRL_STATE_TIMEOUT_LIMIT[14..9] - (RW) Timeout threshold for von sleep controller.
                                     Range 0~63 (@f32k)
    VON_SLP_CTRL_STATE_TIMEOUT[15] - (RO) Timeout status of von sleep controller
                                     0: no timeout
                                     1: timeout
    VON_SLP_CTRL_STATE_TIMEOUT_SNAPSHOT[31..16] - (RO) Snapshot of von sleep controller when timeout happens
                                     [15]=von_slp_ctrl_state[3]
                                     [14]=von_slp_ctrl_state[2]
                                     [13]=von_slp_ctrl_state[1]
                                     [12]=von_slp_ctrl_state[0]
                                     [11]=wfsys_von_mem_pon_done
                                     [10]=wfsys_von_mem_pdn_done
                                     [9] =wfsys_aoc_enable_done
                                     [8] =wfsys_aoc_disable_done
                                     [7] =wfsys_von_slpprot_rdy
                                     [6] =wfsys_von_restore_done
                                     [5] =wfsys_von_backup_done
                                     [4] =wfsys_von_pwr_on
                                     [3] =wfsys_von_1st_pon_flag
                                     [2] =wfsys_von_hw_subsys_pwr_on_state
                                     [1] =wfsys_von_hw_subsys_pwr_pdn_state
                                     [0] =von_slp_ctrl_state_timeout_sync_clk

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_VON_SLP_CTRL_STATE_TIMEOUT_SNAPSHOT_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_VON_SLP_CTRL_STATE_TIMEOUT_SNAPSHOT_MASK 0xFFFF0000u                // VON_SLP_CTRL_STATE_TIMEOUT_SNAPSHOT[31..16]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_VON_SLP_CTRL_STATE_TIMEOUT_SNAPSHOT_SHFT 16u
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_VON_SLP_CTRL_STATE_TIMEOUT_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_VON_SLP_CTRL_STATE_TIMEOUT_MASK 0x00008000u                // VON_SLP_CTRL_STATE_TIMEOUT[15]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_VON_SLP_CTRL_STATE_TIMEOUT_SHFT 15u
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_VON_SLP_CTRL_STATE_TIMEOUT_LIMIT_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_VON_SLP_CTRL_STATE_TIMEOUT_LIMIT_MASK 0x00007E00u                // CR_VON_SLP_CTRL_STATE_TIMEOUT_LIMIT[14..9]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_VON_SLP_CTRL_STATE_TIMEOUT_LIMIT_SHFT 9u
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_VON_SLP_CTRL_STATE_TIMEOUT_CLR_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_VON_SLP_CTRL_STATE_TIMEOUT_CLR_MASK 0x00000100u                // CR_VON_SLP_CTRL_STATE_TIMEOUT_CLR[8]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_VON_SLP_CTRL_STATE_TIMEOUT_CLR_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_VON_SLP_CTRL_STATE_TIMEOUT_EN_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_VON_SLP_CTRL_STATE_TIMEOUT_EN_MASK 0x00000080u                // CR_VON_SLP_CTRL_STATE_TIMEOUT_EN[7]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_VON_SLP_CTRL_STATE_TIMEOUT_EN_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_VON_SLP_CTRL_STATE_ABNORMAL_EN_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_VON_SLP_CTRL_STATE_ABNORMAL_EN_MASK 0x00000040u                // CR_VON_SLP_CTRL_STATE_ABNORMAL_EN[6]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_VON_SLP_CTRL_STATE_ABNORMAL_EN_SHFT 6u
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_MASK_WFSYS_VON_SLPPROT_RDY1_CHK_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_MASK_WFSYS_VON_SLPPROT_RDY1_CHK_MASK 0x00000020u                // CR_MASK_WFSYS_VON_SLPPROT_RDY1_CHK[5]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_MASK_WFSYS_VON_SLPPROT_RDY1_CHK_SHFT 5u
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_MASK_WFSYS_VON_SLPPROT_RDY0_CHK_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_MASK_WFSYS_VON_SLPPROT_RDY0_CHK_MASK 0x00000010u                // CR_MASK_WFSYS_VON_SLPPROT_RDY0_CHK[4]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_MASK_WFSYS_VON_SLPPROT_RDY0_CHK_SHFT 4u
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_FORCE_SKIP_WFSYS_VON_BACKUP_STATE_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_FORCE_SKIP_WFSYS_VON_BACKUP_STATE_MASK 0x00000008u                // CR_FORCE_SKIP_WFSYS_VON_BACKUP_STATE[3]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_FORCE_SKIP_WFSYS_VON_BACKUP_STATE_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_FORCE_SKIP_WFSYS_VON_RESTORE_STATE_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_FORCE_SKIP_WFSYS_VON_RESTORE_STATE_MASK 0x00000004u                // CR_FORCE_SKIP_WFSYS_VON_RESTORE_STATE[2]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_FORCE_SKIP_WFSYS_VON_RESTORE_STATE_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_FORCE_SKIP_WFSYS_VON_MEM_PON_STATE_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_FORCE_SKIP_WFSYS_VON_MEM_PON_STATE_MASK 0x00000002u                // CR_FORCE_SKIP_WFSYS_VON_MEM_PON_STATE[1]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_FORCE_SKIP_WFSYS_VON_MEM_PON_STATE_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_WFSYS_VON_LEGACY_SLEEP_EN_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_WFSYS_VON_LEGACY_SLEEP_EN_MASK 0x00000001u                // CR_WFSYS_VON_LEGACY_SLEEP_EN[0]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_0_CR_WFSYS_VON_LEGACY_SLEEP_EN_SHFT 0u

/* =====================================================================================

  ---WFSYS_MCU_RS_CTRL_0 (0x81021000 + 0x108u)---

    HW_CONTROL[0]                - (RO) This CR is “RW” but is decleared as “RO” because there is some limitation for CODA→RTL flow. When SW wants to enter sleep, SW should write 1 to set hw_control=1. hw_control will be cleared by hw when waking up by EINT/IRQ.
                                     0: MCU won't sleep
                                     1: MCU sleep/wakeup is controlled by hw
    CR_HW_CONTROL_EN[1]          - (RW) To enable hw_control.
                                     0: disable
                                     1: enable
    NON_1ST_TIME_PWR_ON[2]       - (RO) This CR is “RW” but is decleared as “RO” because there is some limitation for CODA→RTL flow. This flag indicate whether it is 1st time power on. Reset value is “0” and will be set to 1 by HW when MCU rs_ctrl enter MCU_PDN_RDY state. SW needs to write 1 to clear this flag after wakeup procedure.
                                     0: 1st time power on
                                     1: non 1st time power on
    CR_NON_1ST_TIME_PWR_ON_CHK_EN[3] - (RW) To enable non_1st_time_pwr_on flag.
                                     0: disable
                                     1: enable
    CR_WFSYS_MCU_SLP_CNT_CLR[4]  - (RW) To clear wfsys_mcu_slp_cnt, sw needs to write 1 clear then write 0 de-clear.
                                     0: not clear
                                     1: clear
    WFSYS_MCU_SLP_CNT[12..5]     - (RO) Indicate how many times MCU mtcmos enter power down state.
                                     Range 0~255 (counter will park at 255 when counting to 255)
    RESERVED13[15..13]           - (RO) Reserved bits
    CR_WFSYS_MCU_PWR_ON_MANUAL[16] - (RW) wfsys_mcu_pwr_on sw mode value
                                     0: power off
                                     1: power on
    CR_WFSYS_MCU_PWR_ON_MANUAL_MODE[17] - (RW) wfsys_mcu_pwr_on manual mode selection
                                     0: hw mode
                                     1: sw mode
    CR_FORCE_WFSYS_MCU_PWR_ON_REQ_HIGH[18] - (RW) Force wfsys_mcu_pwr_on_req high, wfsys_mcu_pwr_on_req will trigger rs_ctrl FSM to MCU_REQ_PON state. This is used to force MCU power on.
                                     0: not force power on
                                     1: force power on
    CR_FORCE_RDY_TO_PWR_ON_MCU[19] - (RW) Force rdy_to_pwr_on_mcu. This is used to force power on MCU criteria to “1” when (wf_osc_rdy&wfsys_von_pwr_rdy_combo) is not as expected.
                                     0: not force
                                     1: force
    CR_FORCE_WF_MCU_OSC_ON_HIGH[20] - (RW) Force wf_mcu_osc_on_post high.
                                     0: not force
                                     1: force
    CR_WF_MCU_OSC_ON_MASK[21]    - (RW) To mask wf_mcu_osc_on for wfsys_mcu_pwr_on_req in case wf_mcu_osc_on stuck at “1” cause MCU power domain cannot enter sleep. This is for debug usage, normal mode should always keep “1”
                                     0: mask
                                     1: un-mask
    CR_WF_MCU_STOP_MASK[22]      - (RW) To mask wf_mcu_stop for wfsys_mcu_pwr_on_req in case wf_mcu_stop stuck at “0” cause MCU power domain cannot enter sleep. This is for debug usage, normal mode should always keep “0”
                                     0: un-mask
                                     1: mask
    CR_MCU_CMDBT_USE_ULM_EN[23]  - (RW) To enable mcu cmdbt use ulm when CPU is at gating mode. This feature is currently not support because  RV55 cpu/ulm clock is not seperated.
                                     0: disable
                                     1: enable
    CR_FORCE_BUS_CLK_EN[24]      - (RW) Force bus_clk_en=1
                                     0: not force
                                     1: force
    CR_FORCE_ULM_CLK_EN[25]      - (RW) Force cpu_clk_en=1
                                     0: not force
                                     1: force
    CR_FORCE_CPU_CLK_EN[26]      - (RW) Force cpu_clk_en=1
                                     0: not force
                                     1: force
    RESERVED27[31..27]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_CPU_CLK_EN_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_CPU_CLK_EN_MASK 0x04000000u                // CR_FORCE_CPU_CLK_EN[26]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_CPU_CLK_EN_SHFT 26u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_ULM_CLK_EN_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_ULM_CLK_EN_MASK 0x02000000u                // CR_FORCE_ULM_CLK_EN[25]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_ULM_CLK_EN_SHFT 25u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_BUS_CLK_EN_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_BUS_CLK_EN_MASK 0x01000000u                // CR_FORCE_BUS_CLK_EN[24]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_BUS_CLK_EN_SHFT 24u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_MCU_CMDBT_USE_ULM_EN_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_MCU_CMDBT_USE_ULM_EN_MASK 0x00800000u                // CR_MCU_CMDBT_USE_ULM_EN[23]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_MCU_CMDBT_USE_ULM_EN_SHFT 23u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WF_MCU_STOP_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WF_MCU_STOP_MASK_MASK 0x00400000u                // CR_WF_MCU_STOP_MASK[22]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WF_MCU_STOP_MASK_SHFT 22u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WF_MCU_OSC_ON_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WF_MCU_OSC_ON_MASK_MASK 0x00200000u                // CR_WF_MCU_OSC_ON_MASK[21]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WF_MCU_OSC_ON_MASK_SHFT 21u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_WF_MCU_OSC_ON_HIGH_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_WF_MCU_OSC_ON_HIGH_MASK 0x00100000u                // CR_FORCE_WF_MCU_OSC_ON_HIGH[20]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_WF_MCU_OSC_ON_HIGH_SHFT 20u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_MCU_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_MCU_MASK 0x00080000u                // CR_FORCE_RDY_TO_PWR_ON_MCU[19]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_MCU_SHFT 19u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_WFSYS_MCU_PWR_ON_REQ_HIGH_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_WFSYS_MCU_PWR_ON_REQ_HIGH_MASK 0x00040000u                // CR_FORCE_WFSYS_MCU_PWR_ON_REQ_HIGH[18]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_FORCE_WFSYS_MCU_PWR_ON_REQ_HIGH_SHFT 18u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WFSYS_MCU_PWR_ON_MANUAL_MODE_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WFSYS_MCU_PWR_ON_MANUAL_MODE_MASK 0x00020000u                // CR_WFSYS_MCU_PWR_ON_MANUAL_MODE[17]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WFSYS_MCU_PWR_ON_MANUAL_MODE_SHFT 17u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WFSYS_MCU_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WFSYS_MCU_PWR_ON_MANUAL_MASK 0x00010000u                // CR_WFSYS_MCU_PWR_ON_MANUAL[16]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WFSYS_MCU_PWR_ON_MANUAL_SHFT 16u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_WFSYS_MCU_SLP_CNT_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_WFSYS_MCU_SLP_CNT_MASK 0x00001FE0u                // WFSYS_MCU_SLP_CNT[12..5]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_WFSYS_MCU_SLP_CNT_SHFT 5u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WFSYS_MCU_SLP_CNT_CLR_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WFSYS_MCU_SLP_CNT_CLR_MASK 0x00000010u                // CR_WFSYS_MCU_SLP_CNT_CLR[4]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_WFSYS_MCU_SLP_CNT_CLR_SHFT 4u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_NON_1ST_TIME_PWR_ON_CHK_EN_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_NON_1ST_TIME_PWR_ON_CHK_EN_MASK 0x00000008u                // CR_NON_1ST_TIME_PWR_ON_CHK_EN[3]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_NON_1ST_TIME_PWR_ON_CHK_EN_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_NON_1ST_TIME_PWR_ON_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_NON_1ST_TIME_PWR_ON_MASK 0x00000004u                // NON_1ST_TIME_PWR_ON[2]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_NON_1ST_TIME_PWR_ON_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_HW_CONTROL_EN_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_HW_CONTROL_EN_MASK 0x00000002u                // CR_HW_CONTROL_EN[1]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_CR_HW_CONTROL_EN_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_HW_CONTROL_ADDR     WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_HW_CONTROL_MASK     0x00000001u                // HW_CONTROL[0]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_0_HW_CONTROL_SHFT     0u

/* =====================================================================================

  ---WFSYS_MCU_RS_CTRL_1 (0x81021000 + 0x10Cu)---

    CR_WF_MCU_PWR_ON_SRC_MASK[7..0] - (RW) wf_mcu_pwr_on_src mask
                                     0: mask
                                     1: un-mask
    WF_MCU_PWR_ON_SRC_DBG_OUT[15..8] - (RO) wf_mcu_pwr_on_src before mask. Bit mapping will be updated later.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_1_WF_MCU_PWR_ON_SRC_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_1_WF_MCU_PWR_ON_SRC_DBG_OUT_MASK 0x0000FF00u                // WF_MCU_PWR_ON_SRC_DBG_OUT[15..8]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_1_WF_MCU_PWR_ON_SRC_DBG_OUT_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_1_CR_WF_MCU_PWR_ON_SRC_MASK_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_1_CR_WF_MCU_PWR_ON_SRC_MASK_MASK 0x000000FFu                // CR_WF_MCU_PWR_ON_SRC_MASK[7..0]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_1_CR_WF_MCU_PWR_ON_SRC_MASK_SHFT 0u

/* =====================================================================================

  ---WFSYS_UMAC_RS_CTRL_0 (0x81021000 + 0x200u)---

    CR_WFSYS_UMAC_PWR_ON_MANUAL[0] - (RW) wfsys_radio_pwr_on sw mode value
                                     0: power off
                                     1: power on
    CR_WFSYS_UMAC_PWR_ON_MANUAL_MODE[1] - (RW) wfsys_radio_pwr_on manual mode selection
                                     0: hw mode
                                     1: sw mode
    CR_FORCE_WFSYS_UMAC_PWR_ON_REQ_HIGH[2] - (RW) Force wfsys_radio_pwr_on_req high, wfsys_radio_pwr_on_req will trigger rs_ctrl FSM to RADIO_REQ_PON state. This is used to force RADIO power on.
                                     0: not force power on
                                     1: force power on
    CR_FORCE_RDY_TO_PWR_ON_UMAC[3] - (RW) Force rdy_to_pwr_on_radio. This is used to force power on RADIO criteria to “1” when (wf_osc_rdy&wfsys_von_pwr_rdy_combo) is not as expected.
                                     0: not force
                                     1: force
    RESERVED4[4]                 - (RO) Reserved bits
    CR_UMAC_WF_PWR_ON_EN[5]      - (RW) To enable radio_wf_pwr_on source from wfsys_vlp_mac_top. This CR is default enable, wfsys_vlp_mac_top should mask radio_wf_pwr_on signal if they don't want to power on.
                                     0: disable
                                     1: enable
    CR_UMAC_AGGRESSIVE_PWR_ON_REQ_EN[6] - (RW) To enable aggressive power on flow for radio, radio will check wfsys_radio_pwr_on_req at RADIO_REQ_PDN state to see if radio want to power on again. This function is to save sleep/wakeup latency when another power on is close to power off.
                                     0: disable
                                     1: enable
    CR_WFSYS_UMAC_SLP_CNT_CLR[7] - (RW) To clear wfsys_radio_slp_cnt, sw needs to write 1 clear then write 0 de-clear.
                                     0: not clear
                                     1: clear
    WFSYS_UMAC_SLP_CNT[15..8]    - (RO) Indicate how many times RADIO mtcmos enter power down state.
                                     Range 0~255 (counter will park at 255 when counting to 255)
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_WFSYS_UMAC_SLP_CNT_ADDR WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_WFSYS_UMAC_SLP_CNT_MASK 0x0000FF00u                // WFSYS_UMAC_SLP_CNT[15..8]
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_WFSYS_UMAC_SLP_CNT_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_WFSYS_UMAC_SLP_CNT_CLR_ADDR WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_WFSYS_UMAC_SLP_CNT_CLR_MASK 0x00000080u                // CR_WFSYS_UMAC_SLP_CNT_CLR[7]
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_WFSYS_UMAC_SLP_CNT_CLR_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_UMAC_AGGRESSIVE_PWR_ON_REQ_EN_ADDR WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_UMAC_AGGRESSIVE_PWR_ON_REQ_EN_MASK 0x00000040u                // CR_UMAC_AGGRESSIVE_PWR_ON_REQ_EN[6]
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_UMAC_AGGRESSIVE_PWR_ON_REQ_EN_SHFT 6u
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_UMAC_WF_PWR_ON_EN_ADDR WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_UMAC_WF_PWR_ON_EN_MASK 0x00000020u                // CR_UMAC_WF_PWR_ON_EN[5]
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_UMAC_WF_PWR_ON_EN_SHFT 5u
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_UMAC_ADDR WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_UMAC_MASK 0x00000008u                // CR_FORCE_RDY_TO_PWR_ON_UMAC[3]
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_UMAC_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_FORCE_WFSYS_UMAC_PWR_ON_REQ_HIGH_ADDR WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_FORCE_WFSYS_UMAC_PWR_ON_REQ_HIGH_MASK 0x00000004u                // CR_FORCE_WFSYS_UMAC_PWR_ON_REQ_HIGH[2]
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_FORCE_WFSYS_UMAC_PWR_ON_REQ_HIGH_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_WFSYS_UMAC_PWR_ON_MANUAL_MODE_ADDR WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_WFSYS_UMAC_PWR_ON_MANUAL_MODE_MASK 0x00000002u                // CR_WFSYS_UMAC_PWR_ON_MANUAL_MODE[1]
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_WFSYS_UMAC_PWR_ON_MANUAL_MODE_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_WFSYS_UMAC_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_WFSYS_UMAC_PWR_ON_MANUAL_MASK 0x00000001u                // CR_WFSYS_UMAC_PWR_ON_MANUAL[0]
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_0_CR_WFSYS_UMAC_PWR_ON_MANUAL_SHFT 0u

/* =====================================================================================

  ---WFSYS_LMACON_RS_CTRL_0 (0x81021000 + 0x204u)---

    CR_WFSYS_LMACON_PWR_ON_MANUAL[0] - (RW) wfsys_radio_pwr_on sw mode value
                                     0: power off
                                     1: power on
    CR_WFSYS_LMACON_PWR_ON_MANUAL_MODE[1] - (RW) wfsys_radio_pwr_on manual mode selection
                                     0: hw mode
                                     1: sw mode
    CR_FORCE_WFSYS_LMACON_PWR_ON_REQ_HIGH[2] - (RW) Force wfsys_radio_pwr_on_req high, wfsys_radio_pwr_on_req will trigger rs_ctrl FSM to RADIO_REQ_PON state. This is used to force RADIO power on.
                                     0: not force power on
                                     1: force power on
    CR_FORCE_RDY_TO_PWR_ON_LMACON[3] - (RW) Force rdy_to_pwr_on_radio. This is used to force power on RADIO criteria to “1” when (wf_osc_rdy&wfsys_von_pwr_rdy_combo) is not as expected.
                                     0: not force
                                     1: force
    RESERVED4[4]                 - (RO) Reserved bits
    CR_LMACON_WF_PWR_ON_EN[5]    - (RW) To enable radio_wf_pwr_on source from wfsys_vlp_mac_top. This CR is default enable, wfsys_vlp_mac_top should mask radio_wf_pwr_on signal if they don't want to power on.
                                     0: disable
                                     1: enable
    CR_LMACON_AGGRESSIVE_PWR_ON_REQ_EN[6] - (RW) To enable aggressive power on flow for radio, radio will check wfsys_radio_pwr_on_req at RADIO_REQ_PDN state to see if radio want to power on again. This function is to save sleep/wakeup latency when another power on is close to power off.
                                     0: disable
                                     1: enable
    CR_WFSYS_LMACON_SLP_CNT_CLR[7] - (RW) To clear wfsys_radio_slp_cnt, sw needs to write 1 clear then write 0 de-clear.
                                     0: not clear
                                     1: clear
    WFSYS_LMACON_SLP_CNT[15..8]  - (RO) Indicate how many times RADIO mtcmos enter power down state.
                                     Range 0~255 (counter will park at 255 when counting to 255)
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_WFSYS_LMACON_SLP_CNT_ADDR WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_WFSYS_LMACON_SLP_CNT_MASK 0x0000FF00u                // WFSYS_LMACON_SLP_CNT[15..8]
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_WFSYS_LMACON_SLP_CNT_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_WFSYS_LMACON_SLP_CNT_CLR_ADDR WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_WFSYS_LMACON_SLP_CNT_CLR_MASK 0x00000080u                // CR_WFSYS_LMACON_SLP_CNT_CLR[7]
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_WFSYS_LMACON_SLP_CNT_CLR_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_LMACON_AGGRESSIVE_PWR_ON_REQ_EN_ADDR WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_LMACON_AGGRESSIVE_PWR_ON_REQ_EN_MASK 0x00000040u                // CR_LMACON_AGGRESSIVE_PWR_ON_REQ_EN[6]
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_LMACON_AGGRESSIVE_PWR_ON_REQ_EN_SHFT 6u
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_LMACON_WF_PWR_ON_EN_ADDR WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_LMACON_WF_PWR_ON_EN_MASK 0x00000020u                // CR_LMACON_WF_PWR_ON_EN[5]
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_LMACON_WF_PWR_ON_EN_SHFT 5u
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_LMACON_ADDR WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_LMACON_MASK 0x00000008u                // CR_FORCE_RDY_TO_PWR_ON_LMACON[3]
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_LMACON_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_FORCE_WFSYS_LMACON_PWR_ON_REQ_HIGH_ADDR WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_FORCE_WFSYS_LMACON_PWR_ON_REQ_HIGH_MASK 0x00000004u                // CR_FORCE_WFSYS_LMACON_PWR_ON_REQ_HIGH[2]
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_FORCE_WFSYS_LMACON_PWR_ON_REQ_HIGH_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_WFSYS_LMACON_PWR_ON_MANUAL_MODE_ADDR WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_WFSYS_LMACON_PWR_ON_MANUAL_MODE_MASK 0x00000002u                // CR_WFSYS_LMACON_PWR_ON_MANUAL_MODE[1]
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_WFSYS_LMACON_PWR_ON_MANUAL_MODE_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_WFSYS_LMACON_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_WFSYS_LMACON_PWR_ON_MANUAL_MASK 0x00000001u                // CR_WFSYS_LMACON_PWR_ON_MANUAL[0]
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_0_CR_WFSYS_LMACON_PWR_ON_MANUAL_SHFT 0u

/* =====================================================================================

  ---WFSYS_BN0_LMAC_RS_CTRL_0 (0x81021000 + 0x218u)---

    CR_WFSYS_BN0_LMAC_PWR_ON_MANUAL[0] - (RW) wfsys_radio_pwr_on sw mode value
                                     0: power off
                                     1: power on
    CR_WFSYS_BN0_LMAC_PWR_ON_MANUAL_MODE[1] - (RW) wfsys_radio_pwr_on manual mode selection
                                     0: hw mode
                                     1: sw mode
    CR_FORCE_WFSYS_BN0_LMAC_PWR_ON_REQ_HIGH[2] - (RW) Force wfsys_radio_pwr_on_req high, wfsys_radio_pwr_on_req will trigger rs_ctrl FSM to RADIO_REQ_PON state. This is used to force RADIO power on.
                                     0: not force power on
                                     1: force power on
    CR_FORCE_RDY_TO_PWR_ON_BN0_LMAC[3] - (RW) Force rdy_to_pwr_on_radio. This is used to force power on RADIO criteria to “1” when (wf_osc_rdy&wfsys_von_pwr_rdy_combo) is not as expected.
                                     0: not force
                                     1: force
    RESERVED4[4]                 - (RO) Reserved bits
    CR_BN0_LMAC_WF_PWR_ON_EN[5]  - (RW) To enable radio_wf_pwr_on source from wfsys_vlp_mac_top. This CR is default enable, wfsys_vlp_mac_top should mask radio_wf_pwr_on signal if they don't want to power on.
                                     0: disable
                                     1: enable
    CR_BN0_LMAC_AGGRESSIVE_PWR_ON_REQ_EN[6] - (RW) To enable aggressive power on flow for radio, radio will check wfsys_radio_pwr_on_req at RADIO_REQ_PDN state to see if radio want to power on again. This function is to save sleep/wakeup latency when another power on is close to power off.
                                     0: disable
                                     1: enable
    CR_WFSYS_BN0_LMAC_SLP_CNT_CLR[7] - (RW) To clear wfsys_radio_slp_cnt, sw needs to write 1 clear then write 0 de-clear.
                                     0: not clear
                                     1: clear
    WFSYS_BN0_LMAC_SLP_CNT[15..8] - (RO) Indicate how many times RADIO mtcmos enter power down state.
                                     Range 0~255 (counter will park at 255 when counting to 255)
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_WFSYS_BN0_LMAC_SLP_CNT_ADDR WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_WFSYS_BN0_LMAC_SLP_CNT_MASK 0x0000FF00u                // WFSYS_BN0_LMAC_SLP_CNT[15..8]
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_WFSYS_BN0_LMAC_SLP_CNT_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_WFSYS_BN0_LMAC_SLP_CNT_CLR_ADDR WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_WFSYS_BN0_LMAC_SLP_CNT_CLR_MASK 0x00000080u                // CR_WFSYS_BN0_LMAC_SLP_CNT_CLR[7]
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_WFSYS_BN0_LMAC_SLP_CNT_CLR_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_BN0_LMAC_AGGRESSIVE_PWR_ON_REQ_EN_ADDR WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_BN0_LMAC_AGGRESSIVE_PWR_ON_REQ_EN_MASK 0x00000040u                // CR_BN0_LMAC_AGGRESSIVE_PWR_ON_REQ_EN[6]
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_BN0_LMAC_AGGRESSIVE_PWR_ON_REQ_EN_SHFT 6u
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_BN0_LMAC_WF_PWR_ON_EN_ADDR WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_BN0_LMAC_WF_PWR_ON_EN_MASK 0x00000020u                // CR_BN0_LMAC_WF_PWR_ON_EN[5]
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_BN0_LMAC_WF_PWR_ON_EN_SHFT 5u
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_BN0_LMAC_ADDR WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_BN0_LMAC_MASK 0x00000008u                // CR_FORCE_RDY_TO_PWR_ON_BN0_LMAC[3]
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_BN0_LMAC_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_FORCE_WFSYS_BN0_LMAC_PWR_ON_REQ_HIGH_ADDR WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_FORCE_WFSYS_BN0_LMAC_PWR_ON_REQ_HIGH_MASK 0x00000004u                // CR_FORCE_WFSYS_BN0_LMAC_PWR_ON_REQ_HIGH[2]
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_FORCE_WFSYS_BN0_LMAC_PWR_ON_REQ_HIGH_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_WFSYS_BN0_LMAC_PWR_ON_MANUAL_MODE_ADDR WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_WFSYS_BN0_LMAC_PWR_ON_MANUAL_MODE_MASK 0x00000002u                // CR_WFSYS_BN0_LMAC_PWR_ON_MANUAL_MODE[1]
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_WFSYS_BN0_LMAC_PWR_ON_MANUAL_MODE_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_WFSYS_BN0_LMAC_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_WFSYS_BN0_LMAC_PWR_ON_MANUAL_MASK 0x00000001u                // CR_WFSYS_BN0_LMAC_PWR_ON_MANUAL[0]
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_0_CR_WFSYS_BN0_LMAC_PWR_ON_MANUAL_SHFT 0u

/* =====================================================================================

  ---WFSYS_BN1_LMAC_RS_CTRL_0 (0x81021000 + 0x21Cu)---

    CR_WFSYS_BN1_LMAC_PWR_ON_MANUAL[0] - (RW) wfsys_radio_pwr_on sw mode value
                                     0: power off
                                     1: power on
    CR_WFSYS_BN1_LMAC_PWR_ON_MANUAL_MODE[1] - (RW) wfsys_radio_pwr_on manual mode selection
                                     0: hw mode
                                     1: sw mode
    CR_FORCE_WFSYS_BN1_LMAC_PWR_ON_REQ_HIGH[2] - (RW) Force wfsys_radio_pwr_on_req high, wfsys_radio_pwr_on_req will trigger rs_ctrl FSM to RADIO_REQ_PON state. This is used to force RADIO power on.
                                     0: not force power on
                                     1: force power on
    CR_FORCE_RDY_TO_PWR_ON_BN1_LMAC[3] - (RW) Force rdy_to_pwr_on_radio. This is used to force power on RADIO criteria to “1” when (wf_osc_rdy&wfsys_von_pwr_rdy_combo) is not as expected.
                                     0: not force
                                     1: force
    RESERVED4[4]                 - (RO) Reserved bits
    CR_BN1_LMAC_WF_PWR_ON_EN[5]  - (RW) To enable radio_wf_pwr_on source from wfsys_vlp_mac_top. This CR is default enable, wfsys_vlp_mac_top should mask radio_wf_pwr_on signal if they don't want to power on.
                                     0: disable
                                     1: enable
    CR_BN1_LMAC_AGGRESSIVE_PWR_ON_REQ_EN[6] - (RW) To enable aggressive power on flow for radio, radio will check wfsys_radio_pwr_on_req at RADIO_REQ_PDN state to see if radio want to power on again. This function is to save sleep/wakeup latency when another power on is close to power off.
                                     0: disable
                                     1: enable
    CR_WFSYS_BN1_LMAC_SLP_CNT_CLR[7] - (RW) To clear wfsys_radio_slp_cnt, sw needs to write 1 clear then write 0 de-clear.
                                     0: not clear
                                     1: clear
    WFSYS_BN1_LMAC_SLP_CNT[15..8] - (RO) Indicate how many times RADIO mtcmos enter power down state.
                                     Range 0~255 (counter will park at 255 when counting to 255)
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_WFSYS_BN1_LMAC_SLP_CNT_ADDR WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_WFSYS_BN1_LMAC_SLP_CNT_MASK 0x0000FF00u                // WFSYS_BN1_LMAC_SLP_CNT[15..8]
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_WFSYS_BN1_LMAC_SLP_CNT_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_WFSYS_BN1_LMAC_SLP_CNT_CLR_ADDR WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_WFSYS_BN1_LMAC_SLP_CNT_CLR_MASK 0x00000080u                // CR_WFSYS_BN1_LMAC_SLP_CNT_CLR[7]
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_WFSYS_BN1_LMAC_SLP_CNT_CLR_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_BN1_LMAC_AGGRESSIVE_PWR_ON_REQ_EN_ADDR WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_BN1_LMAC_AGGRESSIVE_PWR_ON_REQ_EN_MASK 0x00000040u                // CR_BN1_LMAC_AGGRESSIVE_PWR_ON_REQ_EN[6]
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_BN1_LMAC_AGGRESSIVE_PWR_ON_REQ_EN_SHFT 6u
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_BN1_LMAC_WF_PWR_ON_EN_ADDR WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_BN1_LMAC_WF_PWR_ON_EN_MASK 0x00000020u                // CR_BN1_LMAC_WF_PWR_ON_EN[5]
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_BN1_LMAC_WF_PWR_ON_EN_SHFT 5u
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_BN1_LMAC_ADDR WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_BN1_LMAC_MASK 0x00000008u                // CR_FORCE_RDY_TO_PWR_ON_BN1_LMAC[3]
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_BN1_LMAC_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_FORCE_WFSYS_BN1_LMAC_PWR_ON_REQ_HIGH_ADDR WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_FORCE_WFSYS_BN1_LMAC_PWR_ON_REQ_HIGH_MASK 0x00000004u                // CR_FORCE_WFSYS_BN1_LMAC_PWR_ON_REQ_HIGH[2]
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_FORCE_WFSYS_BN1_LMAC_PWR_ON_REQ_HIGH_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_WFSYS_BN1_LMAC_PWR_ON_MANUAL_MODE_ADDR WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_WFSYS_BN1_LMAC_PWR_ON_MANUAL_MODE_MASK 0x00000002u                // CR_WFSYS_BN1_LMAC_PWR_ON_MANUAL_MODE[1]
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_WFSYS_BN1_LMAC_PWR_ON_MANUAL_MODE_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_WFSYS_BN1_LMAC_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_WFSYS_BN1_LMAC_PWR_ON_MANUAL_MASK 0x00000001u                // CR_WFSYS_BN1_LMAC_PWR_ON_MANUAL[0]
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_0_CR_WFSYS_BN1_LMAC_PWR_ON_MANUAL_SHFT 0u

/* =====================================================================================

  ---WFSYS_WF_PHY_0_RS_CTRL_0 (0x81021000 + 0x300u)---

    CR_WFSYS_WF_PHY_0_PWR_ON_MANUAL[0] - (RW) wfsys_radio_pwr_on sw mode value
                                     0: power off
                                     1: power on
    CR_WFSYS_WF_PHY_0_PWR_ON_MANUAL_MODE[1] - (RW) wfsys_radio_pwr_on manual mode selection
                                     0: hw mode
                                     1: sw mode
    CR_FORCE_WFSYS_WF_PHY_0_PWR_ON_REQ_HIGH[2] - (RW) Force wfsys_radio_pwr_on_req high, wfsys_radio_pwr_on_req will trigger rs_ctrl FSM to RADIO_REQ_PON state. This is used to force RADIO power on.
                                     0: not force power on
                                     1: force power on
    CR_FORCE_RDY_TO_PWR_ON_WF_PHY_0[3] - (RW) Force rdy_to_pwr_on_radio. This is used to force power on RADIO criteria to “1” when (wf_osc_rdy&wfsys_von_pwr_rdy_combo) is not as expected.
                                     0: not force
                                     1: force
    RESERVED4[4]                 - (RO) Reserved bits
    CR_WF_PHY_0_WF_PWR_ON_EN[5]  - (RW) To enable radio_wf_pwr_on source from wfsys_vlp_mac_top. This CR is default enable, wfsys_vlp_mac_top should mask radio_wf_pwr_on signal if they don't want to power on.
                                     0: disable
                                     1: enable
    CR_WF_PHY_0_AGGRESSIVE_PWR_ON_REQ_EN[6] - (RW) To enable aggressive power on flow for radio, radio will check wfsys_radio_pwr_on_req at RADIO_REQ_PDN state to see if radio want to power on again. This function is to save sleep/wakeup latency when another power on is close to power off.
                                     0: disable
                                     1: enable
    CR_WFSYS_WF_PHY_0_SLP_CNT_CLR[7] - (RW) To clear wfsys_radio_slp_cnt, sw needs to write 1 clear then write 0 de-clear.
                                     0: not clear
                                     1: clear
    WFSYS_WF_PHY_0_SLP_CNT[15..8] - (RO) Indicate how many times RADIO mtcmos enter power down state.
                                     Range 0~255 (counter will park at 255 when counting to 255)
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_WFSYS_WF_PHY_0_SLP_CNT_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_WFSYS_WF_PHY_0_SLP_CNT_MASK 0x0000FF00u                // WFSYS_WF_PHY_0_SLP_CNT[15..8]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_WFSYS_WF_PHY_0_SLP_CNT_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WFSYS_WF_PHY_0_SLP_CNT_CLR_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WFSYS_WF_PHY_0_SLP_CNT_CLR_MASK 0x00000080u                // CR_WFSYS_WF_PHY_0_SLP_CNT_CLR[7]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WFSYS_WF_PHY_0_SLP_CNT_CLR_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WF_PHY_0_AGGRESSIVE_PWR_ON_REQ_EN_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WF_PHY_0_AGGRESSIVE_PWR_ON_REQ_EN_MASK 0x00000040u                // CR_WF_PHY_0_AGGRESSIVE_PWR_ON_REQ_EN[6]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WF_PHY_0_AGGRESSIVE_PWR_ON_REQ_EN_SHFT 6u
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WF_PHY_0_WF_PWR_ON_EN_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WF_PHY_0_WF_PWR_ON_EN_MASK 0x00000020u                // CR_WF_PHY_0_WF_PWR_ON_EN[5]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WF_PHY_0_WF_PWR_ON_EN_SHFT 5u
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_WF_PHY_0_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_WF_PHY_0_MASK 0x00000008u                // CR_FORCE_RDY_TO_PWR_ON_WF_PHY_0[3]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_WF_PHY_0_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_FORCE_WFSYS_WF_PHY_0_PWR_ON_REQ_HIGH_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_FORCE_WFSYS_WF_PHY_0_PWR_ON_REQ_HIGH_MASK 0x00000004u                // CR_FORCE_WFSYS_WF_PHY_0_PWR_ON_REQ_HIGH[2]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_FORCE_WFSYS_WF_PHY_0_PWR_ON_REQ_HIGH_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WFSYS_WF_PHY_0_PWR_ON_MANUAL_MODE_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WFSYS_WF_PHY_0_PWR_ON_MANUAL_MODE_MASK 0x00000002u                // CR_WFSYS_WF_PHY_0_PWR_ON_MANUAL_MODE[1]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WFSYS_WF_PHY_0_PWR_ON_MANUAL_MODE_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WFSYS_WF_PHY_0_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WFSYS_WF_PHY_0_PWR_ON_MANUAL_MASK 0x00000001u                // CR_WFSYS_WF_PHY_0_PWR_ON_MANUAL[0]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_0_CR_WFSYS_WF_PHY_0_PWR_ON_MANUAL_SHFT 0u

/* =====================================================================================

  ---WFSYS_WF_PHY_1_RS_CTRL_0 (0x81021000 + 0x304u)---

    CR_WFSYS_WF_PHY_1_PWR_ON_MANUAL[0] - (RW) wfsys_radio_pwr_on sw mode value
                                     0: power off
                                     1: power on
    CR_WFSYS_WF_PHY_1_PWR_ON_MANUAL_MODE[1] - (RW) wfsys_radio_pwr_on manual mode selection
                                     0: hw mode
                                     1: sw mode
    CR_FORCE_WFSYS_WF_PHY_1_PWR_ON_REQ_HIGH[2] - (RW) Force wfsys_radio_pwr_on_req high, wfsys_radio_pwr_on_req will trigger rs_ctrl FSM to RADIO_REQ_PON state. This is used to force RADIO power on.
                                     0: not force power on
                                     1: force power on
    CR_FORCE_RDY_TO_PWR_ON_WF_PHY_1[3] - (RW) Force rdy_to_pwr_on_radio. This is used to force power on RADIO criteria to “1” when (wf_osc_rdy&wfsys_von_pwr_rdy_combo) is not as expected.
                                     0: not force
                                     1: force
    RESERVED4[4]                 - (RO) Reserved bits
    CR_WF_PHY_1_WF_PWR_ON_EN[5]  - (RW) To enable radio_wf_pwr_on source from wfsys_vlp_mac_top. This CR is default enable, wfsys_vlp_mac_top should mask radio_wf_pwr_on signal if they don't want to power on.
                                     0: disable
                                     1: enable
    CR_WF_PHY_1_AGGRESSIVE_PWR_ON_REQ_EN[6] - (RW) To enable aggressive power on flow for radio, radio will check wfsys_radio_pwr_on_req at RADIO_REQ_PDN state to see if radio want to power on again. This function is to save sleep/wakeup latency when another power on is close to power off.
                                     0: disable
                                     1: enable
    CR_WFSYS_WF_PHY_1_SLP_CNT_CLR[7] - (RW) To clear wfsys_radio_slp_cnt, sw needs to write 1 clear then write 0 de-clear.
                                     0: not clear
                                     1: clear
    WFSYS_WF_PHY_1_SLP_CNT[15..8] - (RO) Indicate how many times RADIO mtcmos enter power down state.
                                     Range 0~255 (counter will park at 255 when counting to 255)
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_WFSYS_WF_PHY_1_SLP_CNT_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_WFSYS_WF_PHY_1_SLP_CNT_MASK 0x0000FF00u                // WFSYS_WF_PHY_1_SLP_CNT[15..8]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_WFSYS_WF_PHY_1_SLP_CNT_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WFSYS_WF_PHY_1_SLP_CNT_CLR_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WFSYS_WF_PHY_1_SLP_CNT_CLR_MASK 0x00000080u                // CR_WFSYS_WF_PHY_1_SLP_CNT_CLR[7]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WFSYS_WF_PHY_1_SLP_CNT_CLR_SHFT 7u
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WF_PHY_1_AGGRESSIVE_PWR_ON_REQ_EN_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WF_PHY_1_AGGRESSIVE_PWR_ON_REQ_EN_MASK 0x00000040u                // CR_WF_PHY_1_AGGRESSIVE_PWR_ON_REQ_EN[6]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WF_PHY_1_AGGRESSIVE_PWR_ON_REQ_EN_SHFT 6u
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WF_PHY_1_WF_PWR_ON_EN_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WF_PHY_1_WF_PWR_ON_EN_MASK 0x00000020u                // CR_WF_PHY_1_WF_PWR_ON_EN[5]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WF_PHY_1_WF_PWR_ON_EN_SHFT 5u
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_WF_PHY_1_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_WF_PHY_1_MASK 0x00000008u                // CR_FORCE_RDY_TO_PWR_ON_WF_PHY_1[3]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_FORCE_RDY_TO_PWR_ON_WF_PHY_1_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_FORCE_WFSYS_WF_PHY_1_PWR_ON_REQ_HIGH_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_FORCE_WFSYS_WF_PHY_1_PWR_ON_REQ_HIGH_MASK 0x00000004u                // CR_FORCE_WFSYS_WF_PHY_1_PWR_ON_REQ_HIGH[2]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_FORCE_WFSYS_WF_PHY_1_PWR_ON_REQ_HIGH_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WFSYS_WF_PHY_1_PWR_ON_MANUAL_MODE_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WFSYS_WF_PHY_1_PWR_ON_MANUAL_MODE_MASK 0x00000002u                // CR_WFSYS_WF_PHY_1_PWR_ON_MANUAL_MODE[1]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WFSYS_WF_PHY_1_PWR_ON_MANUAL_MODE_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WFSYS_WF_PHY_1_PWR_ON_MANUAL_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WFSYS_WF_PHY_1_PWR_ON_MANUAL_MASK 0x00000001u                // CR_WFSYS_WF_PHY_1_PWR_ON_MANUAL[0]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_0_CR_WFSYS_WF_PHY_1_PWR_ON_MANUAL_SHFT 0u

/* =====================================================================================

  ---WFSYS_PHY_L2_PWR_ON_CTRL_0 (0x81021000 + 0x400u)---

    CR_BN0_PHY_L2_PWR_ON_SEL[0]  - (RW) To decide BN0 PHY L2 mtcmos power on source. Default power on by PHY_ON L2 controller. This selection is for backup mode.
                                     0: power on by bn0_phy_l2_*_wf_pwr_on (from bn0_phy_on)
                                     1: power on by bn0_phy_wf_pwr_on (from wfsys_vlp_mac_top)
    CR_BN1_PHY_L2_PWR_ON_SEL[1]  - (RW) To decide BN1 PHY L2 mtcmos power on source. Default power on by PHY_ON L2 controller. This selection is for backup mode.
                                     0: power on by bn1_phy_l2_*_wf_pwr_on (from bn1_phy_on)
                                     1: power on by bn1_phy_wf_pwr_on (from wfsys_vlp_mac_top)
    CR_BN2_PHY_L2_PWR_ON_SEL[2]  - (RW) To decide BN2 PHY L2 mtcmos power on source. Default power on by PHY_ON L2 controller. This selection is for backup mode.
                                     0: power on by bn2_phy_l2_*_wf_pwr_on (from bn2_phy_on)
                                     1: power on by bn2_phy_wf_pwr_on (from wfsys_vlp_mac_top)
    CR_BN3_PHY_L2_PWR_ON_SEL[3]  - (RW) To decide BN3 PHY L2 mtcmos power on source. Default power on by PHY_ON L2 controller. This selection is for backup mode.
                                     0: power on by bn3_phy_l2_*_wf_pwr_on (from bn3_phy_on)
                                     1: power on by bn3_phy_wf_pwr_on (from wfsys_vlp_mac_top)
    RESERVED4[31..4]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_CR_BN3_PHY_L2_PWR_ON_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_CR_BN3_PHY_L2_PWR_ON_SEL_MASK 0x00000008u                // CR_BN3_PHY_L2_PWR_ON_SEL[3]
#define WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_CR_BN3_PHY_L2_PWR_ON_SEL_SHFT 3u
#define WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_CR_BN2_PHY_L2_PWR_ON_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_CR_BN2_PHY_L2_PWR_ON_SEL_MASK 0x00000004u                // CR_BN2_PHY_L2_PWR_ON_SEL[2]
#define WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_CR_BN2_PHY_L2_PWR_ON_SEL_SHFT 2u
#define WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_CR_BN1_PHY_L2_PWR_ON_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_CR_BN1_PHY_L2_PWR_ON_SEL_MASK 0x00000002u                // CR_BN1_PHY_L2_PWR_ON_SEL[1]
#define WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_CR_BN1_PHY_L2_PWR_ON_SEL_SHFT 1u
#define WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_CR_BN0_PHY_L2_PWR_ON_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_CR_BN0_PHY_L2_PWR_ON_SEL_MASK 0x00000001u                // CR_BN0_PHY_L2_PWR_ON_SEL[0]
#define WF_TOP_CFG_VLP_WFSYS_PHY_L2_PWR_ON_CTRL_0_CR_BN0_PHY_L2_PWR_ON_SEL_SHFT 0u

/* =====================================================================================

  ---WFSYS_OSC_CTRL_DBG_OUT (0x81021000 + 0x800u)---

    WFSYS_OSC_CTRL_DBG_OUT[31..0] - (RO) [31]=wf_osc_rdy_enhance_dbg_out[7];
                                     [30]=wf_osc_rdy_enhance_dbg_out[6];
                                     [29]=wf_osc_rdy_enhance_dbg_out[5];
                                     [28]=wf_osc_rdy_enhance_dbg_out[4];
                                     [27]=wf_osc_rdy_enhance_dbg_out[3];
                                     [26]=wf_osc_rdy_enhance_dbg_out[2];
                                     [25]=wf_osc_rdy_enhance_dbg_out[1];
                                     [24]=wf_osc_rdy_enhance_dbg_out[0];
                                     [23]=1'b1;
                                     [22]=1'b0;
                                     [21]=1'b1;
                                     [20]=1'b0;
                                     [19]=1'b1;
                                     [18]=1'b0;
                                     [17]=wfsys_osc_on_pre;
                                     [16]=wf_subsys_osc_on_all;
                                     [15]=wf_subsys_osc_on_mask;
                                     [14]=cr_force_wfsys_osc_on_high;
                                     [13]=wfsys_osc_on_keep_high_criteria;
                                     [12]=wf_subsys_osc_on_all_enhance;
                                     [11]=wf_subsys_osc_on_mask_falling;
                                     [10]=wf_subsys_osc_on_all_rising;
                                     [9] =wf_osc_rdy_glitch_irq_b;
                                     [8] =wf_osc_rdy_glitch_status;
                                     [7] =wf_subsys_osc_on_error;
                                     [6] =wfsys_vlp_mac_sw_32k_rdy;
                                     [5] =vlp_slpctl_ck_32k_sw_rdy;
                                     [4] =wfsys_von_pwr_rdy_combo;
                                     [3] =wf_osc_rdy;
                                     [2] =wfsys_osc_on_ack;
                                     [1] =wf_subsys_osc_on_all_post;
                                     [0] =wfsys_osc_on;

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_DBG_OUT_WFSYS_OSC_CTRL_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_DBG_OUT_WFSYS_OSC_CTRL_DBG_OUT_MASK 0xFFFFFFFFu                // WFSYS_OSC_CTRL_DBG_OUT[31..0]
#define WF_TOP_CFG_VLP_WFSYS_OSC_CTRL_DBG_OUT_WFSYS_OSC_CTRL_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---WFSYS_LPOSC_CTRL_DBG_OUT (0x81021000 + 0x804u)---

    WFSYS_LPOSC_CTRL_DBG_OUT[31..0] - (RO) [31]=wf_lposc_rdy_enhance_dbg_out[7];
                                     [30]=wf_lposc_rdy_enhance_dbg_out[6];
                                     [29]=wf_lposc_rdy_enhance_dbg_out[5];
                                     [28]=wf_lposc_rdy_enhance_dbg_out[4];
                                     [27]=wf_lposc_rdy_enhance_dbg_out[3];
                                     [26]=wf_lposc_rdy_enhance_dbg_out[2];
                                     [25]=wf_lposc_rdy_enhance_dbg_out[1];
                                     [24]=wf_lposc_rdy_enhance_dbg_out[0];
                                     [23]=1'b1;
                                     [22]=1'b0;
                                     [21]=1'b1;
                                     [20]=1'b0;
                                     [19]=1'b1;
                                     [18]=1'b0;
                                     [17]=conn_aon_slpctl_ck_osc_sw_rdy;
                                     [16]=cr_force_wfsys_lposc_on_high;
                                     [15]=wfsys_lposc_on_pre;
                                     [14]=wf_lposc_on_by_fsm;
                                     [13]=wf_lposc_on_state_next[1];
                                     [12]=wf_lposc_on_state_next[0];
                                     [11]=wf_lposc_on_state[1];
                                     [10]=wf_lposc_on_state[0];
                                     [9] =wf_lposc_rdy_glitch_irq_b;
                                     [8] =wf_lposc_rdy_glitch_status;
                                     [7] =von_slpctl_ck_osc_sw_rdy;
                                     [6] =vlp_slpctl_ck_osc_sw_rdy;
                                     [5] =wf_osc_rdy;
                                     [4] =wf_lposc_rdy;
                                     [3] =wfsys_lposc_on_ack;
                                     [2] =wfsys_von_pwr_off_rdy_combo;
                                     [1] =wf_subsys_osc_on_all_post;
                                     [0] =wfsys_lposc_on;

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_DBG_OUT_WFSYS_LPOSC_CTRL_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_DBG_OUT_WFSYS_LPOSC_CTRL_DBG_OUT_MASK 0xFFFFFFFFu                // WFSYS_LPOSC_CTRL_DBG_OUT[31..0]
#define WF_TOP_CFG_VLP_WFSYS_LPOSC_CTRL_DBG_OUT_WFSYS_LPOSC_CTRL_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---WFSYS_CONN_INFRA_REQ_DBG_OUT (0x81021000 + 0x808u)---

    WFSYS_CONN_INFRA_REQ_DBG_OUT[7..0] - (RO) [7] =1'b1;
                                     [6] =1'b0;
                                     [5] =wf_conn_infra_req_pre;
                                     [4] =wf_conn_infra_req_hw_dbc;
                                     [3] =wf2conn_bus_access_detect_subsys_req;
                                     [2] =wf_coex_conn_infra_req;
                                     [1] =wfsys_conn_infra_rdy;
                                     [0] =wfsys_conn_infra_req;
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_DBG_OUT_WFSYS_CONN_INFRA_REQ_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_DBG_OUT_WFSYS_CONN_INFRA_REQ_DBG_OUT_MASK 0x000000FFu                // WFSYS_CONN_INFRA_REQ_DBG_OUT[7..0]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_REQ_DBG_OUT_WFSYS_CONN_INFRA_REQ_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---WFSYS_CONN_INFRA_BUS_PLL_REQ_DBG_OUT (0x81021000 + 0x80Cu)---

    WFSYS_CONN_INFRA_BUS_PLL_REQ_DBG_OUT[7..0] - (RO) [7] =wf_conn_infra_bus_pll_req_dynamic_dbc;
                                     [6] =wf_conn_infra_bus_pll_req_dynamic;
                                     [5] =wf_conn_infra_bus_pll_req_legacy;
                                     [4] =wf_conn_infra_bus_pll_req_bnx;
                                     [3] =wfsys_wbg_en_pll;
                                     [2] =wpll_rdy_early;
                                     [1] =wf2conn_busy;
                                     [0] =wfsys_conn_infra_bus_pll_req;
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_DBG_OUT_WFSYS_CONN_INFRA_BUS_PLL_REQ_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_DBG_OUT_WFSYS_CONN_INFRA_BUS_PLL_REQ_DBG_OUT_MASK 0x000000FFu                // WFSYS_CONN_INFRA_BUS_PLL_REQ_DBG_OUT[7..0]
#define WF_TOP_CFG_VLP_WFSYS_CONN_INFRA_BUS_PLL_REQ_DBG_OUT_WFSYS_CONN_INFRA_BUS_PLL_REQ_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---WFSYS_WF2AP_BUS_REQ_DBG_OUT (0x81021000 + 0x810u)---

    WFSYS_WF2AP_BUS_REQ_DBG_OUT[7..0] - (RO) [7] =1'b0;
                                     [6] =1'b1;
                                     [5] =1'b0;
                                     [4] =wf2ap_bus_access_detect_req_pre;
                                     [3] =wf2ap_bus_access_detect_ack;
                                     [2] =wf2ap_bus_access_detect_req;
                                     [1] =wfsys_wf2ap_bus_ack;
                                     [0] =wfsys_wf2ap_bus_req;
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_DBG_OUT_WFSYS_WF2AP_BUS_REQ_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_DBG_OUT_WFSYS_WF2AP_BUS_REQ_DBG_OUT_MASK 0x000000FFu                // WFSYS_WF2AP_BUS_REQ_DBG_OUT[7..0]
#define WF_TOP_CFG_VLP_WFSYS_WF2AP_BUS_REQ_DBG_OUT_WFSYS_WF2AP_BUS_REQ_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---VLP_SLPCTL_CKSEL_DBG_OUT (0x81021000 + 0x814u)---

    VLP_SLPCTL_CKSEL_DBG_OUT[15..0] - (RO) [15]=vlp_slpctl_cksel_state_next[2];
                                     [14]=vlp_slpctl_cksel_state_next[1];
                                     [13]=vlp_slpctl_cksel_state_next[0];
                                     [12]=vlp_slpctl_cksel_state[2];
                                     [11]=vlp_slpctl_cksel_state[1];
                                     [10]=vlp_slpctl_cksel_state[0];
                                     [9] =wfsys_von_pwr_off_rdy_combo;
                                     [8] =wf_lposc_rdy;
                                     [7] =wfsys_lposc_on;
                                     [6] =wf_osc_rdy;
                                     [5] =wf_subsys_osc_on_all_post;
                                     [4] =vlp_slpctl_ck_32k_sw_rdy;
                                     [3] =vlp_slpctl_ck_lposc_sw_rdy;
                                     [2] =vlp_slpctl_ck_osc_sw_rdy;
                                     [1] =vlp_slpctl_cksel_post[1];
                                     [0] =vlp_slpctl_cksel_post[0];
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_VLP_SLPCTL_CKSEL_DBG_OUT_VLP_SLPCTL_CKSEL_DBG_OUT_ADDR WF_TOP_CFG_VLP_VLP_SLPCTL_CKSEL_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_VLP_SLPCTL_CKSEL_DBG_OUT_VLP_SLPCTL_CKSEL_DBG_OUT_MASK 0x0000FFFFu                // VLP_SLPCTL_CKSEL_DBG_OUT[15..0]
#define WF_TOP_CFG_VLP_VLP_SLPCTL_CKSEL_DBG_OUT_VLP_SLPCTL_CKSEL_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---VON_SLPCTL_CKSEL_DBG_OUT (0x81021000 + 0x818u)---

    VON_SLPCTL_CKSEL_DBG_OUT[15..0] - (RO) [15]=von_slpctl_cksel_state_next[1];
                                     [14]=von_slpctl_cksel_state_next[0];
                                     [13]=von_slpctl_cksel_state[1];
                                     [12]=von_slpctl_cksel_state[0];
                                     [11]=1'b1;
                                     [10]=1'b0;
                                     [9] =von_slpctl_cksel;
                                     [8] =wfsys_von_pwr_off_rdy_combo;
                                     [7] =von_slpctl_ck_lposc_sw_rdy;
                                     [6] =von_slpctl_ck_osc_sw_rdy;
                                     [5] =wf_osc_rdy;
                                     [4] =wf_subsys_osc_on_all_post;
                                     [3] =1'b0;
                                     [2] =von_slpctl_cksel_pre;
                                     [1] =1'b0;
                                     [0] =von_slpctl_cksel_post;
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_VON_SLPCTL_CKSEL_DBG_OUT_VON_SLPCTL_CKSEL_DBG_OUT_ADDR WF_TOP_CFG_VLP_VON_SLPCTL_CKSEL_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_VON_SLPCTL_CKSEL_DBG_OUT_VON_SLPCTL_CKSEL_DBG_OUT_MASK 0x0000FFFFu                // VON_SLPCTL_CKSEL_DBG_OUT[15..0]
#define WF_TOP_CFG_VLP_VON_SLPCTL_CKSEL_DBG_OUT_VON_SLPCTL_CKSEL_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---AOC_CTRL_DBG_OUT (0x81021000 + 0x81Cu)---

    AOC_CTRL_DBG_OUT[15..0]      - (RO) [15] =aoc_ctrl_state_next[1];
                                     [14] =aoc_ctrl_state_next[0];
                                     [13] =aoc_ctrl_state[1];
                                     [12] =aoc_ctrl_state[0];
                                     [11] =1'b1;
                                     [10] =1'b0;
                                     [9]  =AOCLHENB_off_pre;
                                     [8]  =AOCISO_off_pre;
                                     [7]  =aoc_ctrl_delay_time_cnt_en;
                                     [6]  =wfsys_aoc_disable_done;
                                     [5]  =wfsys_aoc_enable_done;
                                     [4]  =wfsys_von_aoc_req;
                                     [3]  =AOCLHENB;
                                     [2]  =AOCISO;
                                     [1]  =AOCLHENB_off;
                                     [0]  =AOCISO_off;
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_AOC_CTRL_DBG_OUT_AOC_CTRL_DBG_OUT_ADDR  WF_TOP_CFG_VLP_AOC_CTRL_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_AOC_CTRL_DBG_OUT_AOC_CTRL_DBG_OUT_MASK  0x0000FFFFu                // AOC_CTRL_DBG_OUT[15..0]
#define WF_TOP_CFG_VLP_AOC_CTRL_DBG_OUT_AOC_CTRL_DBG_OUT_SHFT  0u

/* =====================================================================================

  ---WFSYS_VON_RS_CTRL_DBG_OUT (0x81021000 + 0x820u)---

    WFSYS_VON_RS_CTRL_DBG_OUT[31..0] - (RO) [31]=1'b1;
                                     [30]=1'b0;
                                     [29]=1'b1;
                                     [28]=1'b0;
                                     [27]=1'b1;
                                     [26]=1'b0;
                                     [25]=1'b1;
                                     [24]=1'b0;
                                     [23]=1'b1;
                                     [22]=1'b0;
                                     [21]=1'b1;
                                     [20]=1'b0;
                                     [19]=1'b1;
                                     [18]=1'b0;
                                     [17]=wfsys_von_1st_pon_flag;
                                     [16]=wfsys_von_pwr_on_req;
                                     [15]=rdy_to_pwr_on_von;
                                     [14]=wf_lposc_rdy;
                                     [13]=wf_subsys_osc_on_all_post;
                                     [12]=wfsys_von_pwr_on;
                                     [11]=wfsys_von_pwr_on_fsm;
                                     [10]=wfsys_von_pwr_on_rdy;
                                     [9] =wfsys_von_pwr_off_rdy;
                                     [8] =wfsys_von_abnormal;
                                     [7] =wfsys_von_pwr_rdy;
                                     [6] =wfsys_von_pwr_rdy_combo;
                                     [5] =von_rs_ctrl_state[2];
                                     [4] =von_rs_ctrl_state[1];
                                     [3] =von_rs_ctrl_state[0];
                                     [2] =von_rs_ctrl_state_next[2];
                                     [1] =von_rs_ctrl_state_next[1];
                                     [0] =von_rs_ctrl_state_next[0];

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_DBG_OUT_WFSYS_VON_RS_CTRL_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_DBG_OUT_WFSYS_VON_RS_CTRL_DBG_OUT_MASK 0xFFFFFFFFu                // WFSYS_VON_RS_CTRL_DBG_OUT[31..0]
#define WF_TOP_CFG_VLP_WFSYS_VON_RS_CTRL_DBG_OUT_WFSYS_VON_RS_CTRL_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---WFSYS_VON_SLP_CTRL_DBG_OUT (0x81021000 + 0x824u)---

    WFSYS_VON_SLP_CTRL_DBG_OUT[31..0] - (RO) [31]=cr_wfsys_von_legacy_sleep_en|wfsys_vcore_is_legacy_sleep;
                                     [30]=wfsys_von_pwr_on_rdy;
                                     [29]=wfsys_von_pwr_off_rdy;
                                     [28]=wfsys_von_abnormal;
                                     [27]=wfsys_von_pwr_enable;
                                     [26]=wfsys_von_mem_pon;
                                     [25]=wfsys_von_aoc_req;
                                     [24]=wfsys_von_slpprot_req;
                                     [23]=wfsys_von_cmdbt_rs_req;
                                     [22]=wfsys_von_cmdbt_bk_req;
                                     [21]=von_slp_ctrl_state_timeout_cnt_en_sync_32k;
                                     [20]=von_slp_ctrl_state_timeout;
                                     [19]=von_slp_ctrl_state_next[3];
                                     [18]=von_slp_ctrl_state_next[2];
                                     [17]=von_slp_ctrl_state_next[1];
                                     [16]=von_slp_ctrl_state_next[0];
                                     [15]=von_slp_ctrl_state[3];
                                     [14]=von_slp_ctrl_state[2];
                                     [13]=von_slp_ctrl_state[1];
                                     [12]=von_slp_ctrl_state[0];
                                     [11]=wfsys_von_mem_pon_done;
                                     [10]=wfsys_von_mem_pdn_done;
                                     [9] =wfsys_aoc_enable_done;
                                     [8] =wfsys_aoc_disable_done;
                                     [7] =wfsys_von_slpprot_rdy;
                                     [6] =wfsys_von_restore_done;
                                     [5] =wfsys_von_backup_done;
                                     [4] =wfsys_von_pwr_on;
                                     [3] =wfsys_von_1st_pon_flag;
                                     [2] =wfsys_von_hw_subsys_pwr_on_state;
                                     [1] =wfsys_von_hw_subsys_pwr_pdn_state;
                                     [0] =von_slp_ctrl_state_timeout_sync_clk;

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_DBG_OUT_WFSYS_VON_SLP_CTRL_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_DBG_OUT_WFSYS_VON_SLP_CTRL_DBG_OUT_MASK 0xFFFFFFFFu                // WFSYS_VON_SLP_CTRL_DBG_OUT[31..0]
#define WF_TOP_CFG_VLP_WFSYS_VON_SLP_CTRL_DBG_OUT_WFSYS_VON_SLP_CTRL_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---WFSYS_MCU_RS_CTRL_DBG_OUT (0x81021000 + 0x828u)---

    WFSYS_MCU_RS_CTRL_DBG_OUT[31..0] - (RO) [31]=1'b1;
                                     [30]=1'b0;
                                     [29]=1'b1;
                                     [28]=1'b0;
                                     [27]=1'b1;
                                     [26]=1'b0;
                                     [25]=wfsys_mcu_1st_pon_flag;
                                     [24]=wf_osc_rdy;
                                     [23]=wfsys_von_pwr_rdy_combo;
                                     [22]=wf_mcu_stop;
                                     [21]=wf_mcu_osc_on;
                                     [20]=irq;
                                     [19]=eint;
                                     [18]=irq_lv;
                                     [17]=eint_lv;
                                     [16]=wfsys_mcu_pwr_on_rdy;
                                     [15]=wfsys_mcu_pwr_off_rdy;
                                     [14]=wfsys_mcu_abnormal;
                                     [13]=wfsys_mcu_pwr_on_req;
                                     [12]=wfsys_mcu_pwr_on_fsm;
                                     [11]=wfsys_mcu_pwr_on;
                                     [10]=wfsys_mcu_pwr_rdy;
                                     [9] =rdy_to_pwr_on_mcu;
                                     [8] =mcu_cmdbt_busy;
                                     [7] =non_1st_time_pwr_on;
                                     [6] =hw_control;
                                     [5] =mcu_rs_ctrl_state[2];
                                     [4] =mcu_rs_ctrl_state[1];
                                     [3] =mcu_rs_ctrl_state[0];
                                     [2] =mcu_rs_ctrl_state_next[2];
                                     [1] =mcu_rs_ctrl_state_next[1];
                                     [0] =mcu_rs_ctrl_state_next[0];

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_DBG_OUT_WFSYS_MCU_RS_CTRL_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_DBG_OUT_WFSYS_MCU_RS_CTRL_DBG_OUT_MASK 0xFFFFFFFFu                // WFSYS_MCU_RS_CTRL_DBG_OUT[31..0]
#define WF_TOP_CFG_VLP_WFSYS_MCU_RS_CTRL_DBG_OUT_WFSYS_MCU_RS_CTRL_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---WFSYS_UMAC_RS_CTRL_DBG_OUT (0x81021000 + 0x82Cu)---

    WFSYS_UMAC_RS_CTRL_DBG_OUT[31..0] - (RO) [31]=wfsys_radio_slp_cnt[7];
                                     [30]=wfsys_radio_slp_cnt[6];
                                     [29]=wfsys_radio_slp_cnt[5];
                                     [28]=wfsys_radio_slp_cnt[4];
                                     [27]=wfsys_radio_slp_cnt[3];
                                     [26]=wfsys_radio_slp_cnt[2];
                                     [25]=wfsys_radio_slp_cnt[1];
                                     [24]=wfsys_radio_slp_cnt[0];
                                     [23]=1'b1;
                                     [22]=1'b0;
                                     [21]=1'b1;
                                     [20]=1'b0;
                                     [19]=1'b1;
                                     [18]=rdy_to_pwr_off_criteria_due_to_pwr_relation;
                                     [17]=rdy_to_pwr_on_criteria_due_to_pwr_relation;
                                     [16]=wfsys_radio_pwr_on_req;
                                     [15]=rdy_to_pwr_on_radio;
                                     [14]=radio_wf_pwr_off_rdy;
                                     [13]=radio_wf_pwr_on_rdy;
                                     [12]=radio_wf_pwr_on;
                                     [11]=wfsys_radio_pwr_on;
                                     [10]=wfsys_radio_abnormal;
                                     [9] =wfsys_radio_pwr_off_rdy;
                                     [8] =wfsys_radio_pwr_on_rdy;
                                     [7] =wfsys_von_pwr_rdy_combo;
                                     [6] =wf_osc_rdy;
                                     [5] =radio_rs_ctrl_state[2];
                                     [4] =radio_rs_ctrl_state[1];
                                     [3] =radio_rs_ctrl_state[0];
                                     [2] =radio_rs_ctrl_state_next[2];
                                     [1] =radio_rs_ctrl_state_next[1];
                                     [0] =radio_rs_ctrl_state_next[0];

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_DBG_OUT_WFSYS_UMAC_RS_CTRL_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_DBG_OUT_WFSYS_UMAC_RS_CTRL_DBG_OUT_MASK 0xFFFFFFFFu                // WFSYS_UMAC_RS_CTRL_DBG_OUT[31..0]
#define WF_TOP_CFG_VLP_WFSYS_UMAC_RS_CTRL_DBG_OUT_WFSYS_UMAC_RS_CTRL_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---WFSYS_LMACON_RS_CTRL_DBG_OUT (0x81021000 + 0x830u)---

    WFSYS_LMACON_RS_CTRL_DBG_OUT[31..0] - (RO) [31]=wfsys_radio_slp_cnt[7];
                                     [30]=wfsys_radio_slp_cnt[6];
                                     [29]=wfsys_radio_slp_cnt[5];
                                     [28]=wfsys_radio_slp_cnt[4];
                                     [27]=wfsys_radio_slp_cnt[3];
                                     [26]=wfsys_radio_slp_cnt[2];
                                     [25]=wfsys_radio_slp_cnt[1];
                                     [24]=wfsys_radio_slp_cnt[0];
                                     [23]=1'b1;
                                     [22]=1'b0;
                                     [21]=1'b1;
                                     [20]=1'b0;
                                     [19]=1'b1;
                                     [18]=rdy_to_pwr_off_criteria_due_to_pwr_relation;
                                     [17]=rdy_to_pwr_on_criteria_due_to_pwr_relation;
                                     [16]=wfsys_radio_pwr_on_req;
                                     [15]=rdy_to_pwr_on_radio;
                                     [14]=radio_wf_pwr_off_rdy;
                                     [13]=radio_wf_pwr_on_rdy;
                                     [12]=radio_wf_pwr_on;
                                     [11]=wfsys_radio_pwr_on;
                                     [10]=wfsys_radio_abnormal;
                                     [9] =wfsys_radio_pwr_off_rdy;
                                     [8] =wfsys_radio_pwr_on_rdy;
                                     [7] =wfsys_von_pwr_rdy_combo;
                                     [6] =wf_osc_rdy;
                                     [5] =radio_rs_ctrl_state[2];
                                     [4] =radio_rs_ctrl_state[1];
                                     [3] =radio_rs_ctrl_state[0];
                                     [2] =radio_rs_ctrl_state_next[2];
                                     [1] =radio_rs_ctrl_state_next[1];
                                     [0] =radio_rs_ctrl_state_next[0];

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_DBG_OUT_WFSYS_LMACON_RS_CTRL_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_DBG_OUT_WFSYS_LMACON_RS_CTRL_DBG_OUT_MASK 0xFFFFFFFFu                // WFSYS_LMACON_RS_CTRL_DBG_OUT[31..0]
#define WF_TOP_CFG_VLP_WFSYS_LMACON_RS_CTRL_DBG_OUT_WFSYS_LMACON_RS_CTRL_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---WFSYS_BN0_LMAC_RS_CTRL_DBG_OUT (0x81021000 + 0x844u)---

    WFSYS_BN0_LMAC_RS_CTRL_DBG_OUT[31..0] - (RO) [31]=wfsys_radio_slp_cnt[7];
                                     [30]=wfsys_radio_slp_cnt[6];
                                     [29]=wfsys_radio_slp_cnt[5];
                                     [28]=wfsys_radio_slp_cnt[4];
                                     [27]=wfsys_radio_slp_cnt[3];
                                     [26]=wfsys_radio_slp_cnt[2];
                                     [25]=wfsys_radio_slp_cnt[1];
                                     [24]=wfsys_radio_slp_cnt[0];
                                     [23]=1'b1;
                                     [22]=1'b0;
                                     [21]=1'b1;
                                     [20]=1'b0;
                                     [19]=1'b1;
                                     [18]=rdy_to_pwr_off_criteria_due_to_pwr_relation;
                                     [17]=rdy_to_pwr_on_criteria_due_to_pwr_relation;
                                     [16]=wfsys_radio_pwr_on_req;
                                     [15]=rdy_to_pwr_on_radio;
                                     [14]=radio_wf_pwr_off_rdy;
                                     [13]=radio_wf_pwr_on_rdy;
                                     [12]=radio_wf_pwr_on;
                                     [11]=wfsys_radio_pwr_on;
                                     [10]=wfsys_radio_abnormal;
                                     [9] =wfsys_radio_pwr_off_rdy;
                                     [8] =wfsys_radio_pwr_on_rdy;
                                     [7] =wfsys_von_pwr_rdy_combo;
                                     [6] =wf_osc_rdy;
                                     [5] =radio_rs_ctrl_state[2];
                                     [4] =radio_rs_ctrl_state[1];
                                     [3] =radio_rs_ctrl_state[0];
                                     [2] =radio_rs_ctrl_state_next[2];
                                     [1] =radio_rs_ctrl_state_next[1];
                                     [0] =radio_rs_ctrl_state_next[0];

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_DBG_OUT_WFSYS_BN0_LMAC_RS_CTRL_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_DBG_OUT_WFSYS_BN0_LMAC_RS_CTRL_DBG_OUT_MASK 0xFFFFFFFFu                // WFSYS_BN0_LMAC_RS_CTRL_DBG_OUT[31..0]
#define WF_TOP_CFG_VLP_WFSYS_BN0_LMAC_RS_CTRL_DBG_OUT_WFSYS_BN0_LMAC_RS_CTRL_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---WFSYS_BN1_LMAC_RS_CTRL_DBG_OUT (0x81021000 + 0x848u)---

    WFSYS_BN1_LMAC_RS_CTRL_DBG_OUT[31..0] - (RO) [31]=wfsys_radio_slp_cnt[7];
                                     [30]=wfsys_radio_slp_cnt[6];
                                     [29]=wfsys_radio_slp_cnt[5];
                                     [28]=wfsys_radio_slp_cnt[4];
                                     [27]=wfsys_radio_slp_cnt[3];
                                     [26]=wfsys_radio_slp_cnt[2];
                                     [25]=wfsys_radio_slp_cnt[1];
                                     [24]=wfsys_radio_slp_cnt[0];
                                     [23]=1'b1;
                                     [22]=1'b0;
                                     [21]=1'b1;
                                     [20]=1'b0;
                                     [19]=1'b1;
                                     [18]=rdy_to_pwr_off_criteria_due_to_pwr_relation;
                                     [17]=rdy_to_pwr_on_criteria_due_to_pwr_relation;
                                     [16]=wfsys_radio_pwr_on_req;
                                     [15]=rdy_to_pwr_on_radio;
                                     [14]=radio_wf_pwr_off_rdy;
                                     [13]=radio_wf_pwr_on_rdy;
                                     [12]=radio_wf_pwr_on;
                                     [11]=wfsys_radio_pwr_on;
                                     [10]=wfsys_radio_abnormal;
                                     [9] =wfsys_radio_pwr_off_rdy;
                                     [8] =wfsys_radio_pwr_on_rdy;
                                     [7] =wfsys_von_pwr_rdy_combo;
                                     [6] =wf_osc_rdy;
                                     [5] =radio_rs_ctrl_state[2];
                                     [4] =radio_rs_ctrl_state[1];
                                     [3] =radio_rs_ctrl_state[0];
                                     [2] =radio_rs_ctrl_state_next[2];
                                     [1] =radio_rs_ctrl_state_next[1];
                                     [0] =radio_rs_ctrl_state_next[0];

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_DBG_OUT_WFSYS_BN1_LMAC_RS_CTRL_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_DBG_OUT_WFSYS_BN1_LMAC_RS_CTRL_DBG_OUT_MASK 0xFFFFFFFFu                // WFSYS_BN1_LMAC_RS_CTRL_DBG_OUT[31..0]
#define WF_TOP_CFG_VLP_WFSYS_BN1_LMAC_RS_CTRL_DBG_OUT_WFSYS_BN1_LMAC_RS_CTRL_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---WFSYS_WF_PHY_0_RS_CTRL_DBG_OUT (0x81021000 + 0x858u)---

    WFSYS_WF_PHY_0_RS_CTRL_DBG_OUT[31..0] - (RO) [31]=wfsys_radio_slp_cnt[7];
                                     [30]=wfsys_radio_slp_cnt[6];
                                     [29]=wfsys_radio_slp_cnt[5];
                                     [28]=wfsys_radio_slp_cnt[4];
                                     [27]=wfsys_radio_slp_cnt[3];
                                     [26]=wfsys_radio_slp_cnt[2];
                                     [25]=wfsys_radio_slp_cnt[1];
                                     [24]=wfsys_radio_slp_cnt[0];
                                     [23]=1'b1;
                                     [22]=1'b0;
                                     [21]=1'b1;
                                     [20]=1'b0;
                                     [19]=1'b1;
                                     [18]=rdy_to_pwr_off_criteria_due_to_pwr_relation;
                                     [17]=rdy_to_pwr_on_criteria_due_to_pwr_relation;
                                     [16]=wfsys_radio_pwr_on_req;
                                     [15]=rdy_to_pwr_on_radio;
                                     [14]=radio_wf_pwr_off_rdy;
                                     [13]=radio_wf_pwr_on_rdy;
                                     [12]=radio_wf_pwr_on;
                                     [11]=wfsys_radio_pwr_on;
                                     [10]=wfsys_radio_abnormal;
                                     [9] =wfsys_radio_pwr_off_rdy;
                                     [8] =wfsys_radio_pwr_on_rdy;
                                     [7] =wfsys_von_pwr_rdy_combo;
                                     [6] =wf_osc_rdy;
                                     [5] =radio_rs_ctrl_state[2];
                                     [4] =radio_rs_ctrl_state[1];
                                     [3] =radio_rs_ctrl_state[0];
                                     [2] =radio_rs_ctrl_state_next[2];
                                     [1] =radio_rs_ctrl_state_next[1];
                                     [0] =radio_rs_ctrl_state_next[0];

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_DBG_OUT_WFSYS_WF_PHY_0_RS_CTRL_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_DBG_OUT_WFSYS_WF_PHY_0_RS_CTRL_DBG_OUT_MASK 0xFFFFFFFFu                // WFSYS_WF_PHY_0_RS_CTRL_DBG_OUT[31..0]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_0_RS_CTRL_DBG_OUT_WFSYS_WF_PHY_0_RS_CTRL_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---WFSYS_WF_PHY_1_RS_CTRL_DBG_OUT (0x81021000 + 0x85Cu)---

    WFSYS_WF_PHY_1_RS_CTRL_DBG_OUT[31..0] - (RO) [31]=wfsys_radio_slp_cnt[7];
                                     [30]=wfsys_radio_slp_cnt[6];
                                     [29]=wfsys_radio_slp_cnt[5];
                                     [28]=wfsys_radio_slp_cnt[4];
                                     [27]=wfsys_radio_slp_cnt[3];
                                     [26]=wfsys_radio_slp_cnt[2];
                                     [25]=wfsys_radio_slp_cnt[1];
                                     [24]=wfsys_radio_slp_cnt[0];
                                     [23]=1'b1;
                                     [22]=1'b0;
                                     [21]=1'b1;
                                     [20]=1'b0;
                                     [19]=1'b1;
                                     [18]=rdy_to_pwr_off_criteria_due_to_pwr_relation;
                                     [17]=rdy_to_pwr_on_criteria_due_to_pwr_relation;
                                     [16]=wfsys_radio_pwr_on_req;
                                     [15]=rdy_to_pwr_on_radio;
                                     [14]=radio_wf_pwr_off_rdy;
                                     [13]=radio_wf_pwr_on_rdy;
                                     [12]=radio_wf_pwr_on;
                                     [11]=wfsys_radio_pwr_on;
                                     [10]=wfsys_radio_abnormal;
                                     [9] =wfsys_radio_pwr_off_rdy;
                                     [8] =wfsys_radio_pwr_on_rdy;
                                     [7] =wfsys_von_pwr_rdy_combo;
                                     [6] =wf_osc_rdy;
                                     [5] =radio_rs_ctrl_state[2];
                                     [4] =radio_rs_ctrl_state[1];
                                     [3] =radio_rs_ctrl_state[0];
                                     [2] =radio_rs_ctrl_state_next[2];
                                     [1] =radio_rs_ctrl_state_next[1];
                                     [0] =radio_rs_ctrl_state_next[0];

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_DBG_OUT_WFSYS_WF_PHY_1_RS_CTRL_DBG_OUT_ADDR WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_DBG_OUT_ADDR
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_DBG_OUT_WFSYS_WF_PHY_1_RS_CTRL_DBG_OUT_MASK 0xFFFFFFFFu                // WFSYS_WF_PHY_1_RS_CTRL_DBG_OUT[31..0]
#define WF_TOP_CFG_VLP_WFSYS_WF_PHY_1_RS_CTRL_DBG_OUT_WFSYS_WF_PHY_1_RS_CTRL_DBG_OUT_SHFT 0u

/* =====================================================================================

  ---CFG_VLP_HW_RSV_CR_0 (0x81021000 + 0xA00u)---

    CFG_VLP_HW_RSV_CR_0[31..0]   - (RW) This CR is reserved for HW eco usage, SW is "not" allowed to use this CR

 =====================================================================================*/
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_0_CFG_VLP_HW_RSV_CR_0_ADDR WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_0_ADDR
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_0_CFG_VLP_HW_RSV_CR_0_MASK 0xFFFFFFFFu                // CFG_VLP_HW_RSV_CR_0[31..0]
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_0_CFG_VLP_HW_RSV_CR_0_SHFT 0u

/* =====================================================================================

  ---CFG_VLP_HW_RSV_CR_1 (0x81021000 + 0xA04u)---

    CFG_VLP_HW_RSV_CR_1[31..0]   - (RW) This CR is reserved for HW eco usage, SW is "not" allowed to use this CR

 =====================================================================================*/
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_1_CFG_VLP_HW_RSV_CR_1_ADDR WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_1_ADDR
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_1_CFG_VLP_HW_RSV_CR_1_MASK 0xFFFFFFFFu                // CFG_VLP_HW_RSV_CR_1[31..0]
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_1_CFG_VLP_HW_RSV_CR_1_SHFT 0u

/* =====================================================================================

  ---CFG_VLP_HW_RSV_CR_2 (0x81021000 + 0xA08u)---

    CFG_VLP_HW_RSV_CR_2[31..0]   - (RW) This CR is reserved for HW eco usage, SW is "not" allowed to use this CR

 =====================================================================================*/
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_2_CFG_VLP_HW_RSV_CR_2_ADDR WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_2_ADDR
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_2_CFG_VLP_HW_RSV_CR_2_MASK 0xFFFFFFFFu                // CFG_VLP_HW_RSV_CR_2[31..0]
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_2_CFG_VLP_HW_RSV_CR_2_SHFT 0u

/* =====================================================================================

  ---CFG_VLP_HW_RSV_CR_3 (0x81021000 + 0xA0Cu)---

    CFG_VLP_HW_RSV_CR_3[31..0]   - (RW) This CR is reserved for HW eco usage, SW is "not" allowed to use this CR

 =====================================================================================*/
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_3_CFG_VLP_HW_RSV_CR_3_ADDR WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_3_ADDR
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_3_CFG_VLP_HW_RSV_CR_3_MASK 0xFFFFFFFFu                // CFG_VLP_HW_RSV_CR_3[31..0]
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_3_CFG_VLP_HW_RSV_CR_3_SHFT 0u

/* =====================================================================================

  ---CFG_VLP_HW_RSV_CR_4 (0x81021000 + 0xA10u)---

    CFG_VLP_HW_RSV_CR_4[31..0]   - (RW) This CR is reserved for HW eco usage, SW is "not" allowed to use this CR

 =====================================================================================*/
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_4_CFG_VLP_HW_RSV_CR_4_ADDR WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_4_ADDR
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_4_CFG_VLP_HW_RSV_CR_4_MASK 0xFFFFFFFFu                // CFG_VLP_HW_RSV_CR_4[31..0]
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_4_CFG_VLP_HW_RSV_CR_4_SHFT 0u

/* =====================================================================================

  ---CFG_VLP_HW_RSV_CR_5 (0x81021000 + 0xA14u)---

    CFG_VLP_HW_RSV_CR_5[31..0]   - (RW) This CR is reserved for HW eco usage, SW is "not" allowed to use this CR

 =====================================================================================*/
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_5_CFG_VLP_HW_RSV_CR_5_ADDR WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_5_ADDR
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_5_CFG_VLP_HW_RSV_CR_5_MASK 0xFFFFFFFFu                // CFG_VLP_HW_RSV_CR_5[31..0]
#define WF_TOP_CFG_VLP_CFG_VLP_HW_RSV_CR_5_CFG_VLP_HW_RSV_CR_5_SHFT 0u

/* =====================================================================================

  ---WFSYS_VLP_MONFLG_SEL_0 (0x81021000 + 0xD00u)---

    RESERVED0[28..0]             - (RO) Reserved bits
    CR_VLP_MONFLG_BIT_SWAP[29]   - (RW) To decide whether to swap vlp_monflg_out data
                                     0: don't swap (vlp_monflg_out_post[31:0] = vlp_monflg_out[31:0]
                                     1: swap (vlp_monflg_out_post[31:24] = vlp_monflg_out[7:0], vlp_monflg_out_post[23:16] = vlp_monflg_out[15:8], vlp_monflg_out_post[15:8] = vlp_monflg_out[23:16], vlp_monflg_out_post[7:0] = vlp_monflg_out[31:24])
    CR_VLP_MONFLG_CTRL_SEL[30]   - (RW) To decide vlp_monflg controlled by host or wf_top_cfg_vlp CR
                                     0: host CR
                                     1: wf_top_cfg_vlp CR
    CR_VLP_MONFLG_EN[31]         - (RW) To enable vlp_monflg_out. This CR is only effective when cr_vlp_monflg_ctrl_sel=1
                                     0: disable
                                     1: enable

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_0_CR_VLP_MONFLG_EN_ADDR WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_0_CR_VLP_MONFLG_EN_MASK 0x80000000u                // CR_VLP_MONFLG_EN[31]
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_0_CR_VLP_MONFLG_EN_SHFT 31u
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_0_CR_VLP_MONFLG_CTRL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_0_CR_VLP_MONFLG_CTRL_SEL_MASK 0x40000000u                // CR_VLP_MONFLG_CTRL_SEL[30]
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_0_CR_VLP_MONFLG_CTRL_SEL_SHFT 30u
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_0_CR_VLP_MONFLG_BIT_SWAP_ADDR WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_0_CR_VLP_MONFLG_BIT_SWAP_MASK 0x20000000u                // CR_VLP_MONFLG_BIT_SWAP[29]
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_0_CR_VLP_MONFLG_BIT_SWAP_SHFT 29u

/* =====================================================================================

  ---WFSYS_VLP_MONFLG_SEL_1 (0x81021000 + 0xD04u)---

    CR_VLP_MONFLG_SEL_BIT07TO00[4..0] - (RW) To select vlp_monflg_out[7:0]. This CR is only effective when cr_vlp_monflg_ctrl_sel=1
                                     Range 0~31
    RESERVED5[7..5]              - (RO) Reserved bits
    CR_VLP_MONFLG_SEL_BIT15TO08[12..8] - (RW) To select vlp_monflg_out[15:8]. This CR is only effective when cr_vlp_monflg_ctrl_sel=1
                                     Range 0~31
    RESERVED13[15..13]           - (RO) Reserved bits
    CR_VLP_MONFLG_SEL_BIT23TO16[20..16] - (RW) To select vlp_monflg_out[23:16]. This CR is only effective when cr_vlp_monflg_ctrl_sel=1
                                     Range 0~31
    RESERVED21[23..21]           - (RO) Reserved bits
    CR_VLP_MONFLG_SEL_BIT31TO24[28..24] - (RW) To select vlp_monflg_out[31:24]. This CR is only effective when cr_vlp_monflg_ctrl_sel=1
                                     Range 0~31
    RESERVED29[31..29]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_CR_VLP_MONFLG_SEL_BIT31TO24_ADDR WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_CR_VLP_MONFLG_SEL_BIT31TO24_MASK 0x1F000000u                // CR_VLP_MONFLG_SEL_BIT31TO24[28..24]
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_CR_VLP_MONFLG_SEL_BIT31TO24_SHFT 24u
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_CR_VLP_MONFLG_SEL_BIT23TO16_ADDR WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_CR_VLP_MONFLG_SEL_BIT23TO16_MASK 0x001F0000u                // CR_VLP_MONFLG_SEL_BIT23TO16[20..16]
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_CR_VLP_MONFLG_SEL_BIT23TO16_SHFT 16u
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_CR_VLP_MONFLG_SEL_BIT15TO08_ADDR WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_CR_VLP_MONFLG_SEL_BIT15TO08_MASK 0x00001F00u                // CR_VLP_MONFLG_SEL_BIT15TO08[12..8]
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_CR_VLP_MONFLG_SEL_BIT15TO08_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_CR_VLP_MONFLG_SEL_BIT07TO00_ADDR WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_CR_VLP_MONFLG_SEL_BIT07TO00_MASK 0x0000001Fu                // CR_VLP_MONFLG_SEL_BIT07TO00[4..0]
#define WF_TOP_CFG_VLP_WFSYS_VLP_MONFLG_SEL_1_CR_VLP_MONFLG_SEL_BIT07TO00_SHFT 0u

/* =====================================================================================

  ---WFSYS_VON_MONFLG_SEL_0 (0x81021000 + 0xD08u)---

    CR_von_MONFLG_SEL_BIT07TO00[4..0] - (RW) To select von_monflg_out[7:0]. This CR is only effective when cr_von_monflg_ctrl_sel=1
                                     Range 0~31
    RESERVED5[7..5]              - (RO) Reserved bits
    CR_von_MONFLG_SEL_BIT15TO08[12..8] - (RW) To select von_monflg_out[15:8]. This CR is only effective when cr_von_monflg_ctrl_sel=1
                                     Range 0~31
    RESERVED13[15..13]           - (RO) Reserved bits
    CR_von_MONFLG_SEL_BIT23TO16[20..16] - (RW) To select von_monflg_out[23:16]. This CR is only effective when cr_von_monflg_ctrl_sel=1
                                     Range 0~31
    RESERVED21[23..21]           - (RO) Reserved bits
    CR_von_MONFLG_SEL_BIT31TO24[28..24] - (RW) To select von_monflg_out[31:24]. This CR is only effective when cr_von_monflg_ctrl_sel=1
                                     Range 0~31
    RESERVED29[29]               - (RO) Reserved bits
    CR_VON_MONFLG_CTRL_SEL[30]   - (RW) To decide von_monflg controlled by host or wf_top_cfg_von CR
                                     0: host CR
                                     1: wf_top_cfg_von CR
    CR_VON_MONFLG_EN[31]         - (RW) To enable von_monflg_out. This CR is only effective when cr_von_monflg_ctrl_sel=1
                                     0: disable
                                     1: enable

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_VON_MONFLG_EN_ADDR WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_VON_MONFLG_EN_MASK 0x80000000u                // CR_VON_MONFLG_EN[31]
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_VON_MONFLG_EN_SHFT 31u
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_VON_MONFLG_CTRL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_VON_MONFLG_CTRL_SEL_MASK 0x40000000u                // CR_VON_MONFLG_CTRL_SEL[30]
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_VON_MONFLG_CTRL_SEL_SHFT 30u
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_von_MONFLG_SEL_BIT31TO24_ADDR WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_von_MONFLG_SEL_BIT31TO24_MASK 0x1F000000u                // CR_von_MONFLG_SEL_BIT31TO24[28..24]
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_von_MONFLG_SEL_BIT31TO24_SHFT 24u
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_von_MONFLG_SEL_BIT23TO16_ADDR WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_von_MONFLG_SEL_BIT23TO16_MASK 0x001F0000u                // CR_von_MONFLG_SEL_BIT23TO16[20..16]
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_von_MONFLG_SEL_BIT23TO16_SHFT 16u
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_von_MONFLG_SEL_BIT15TO08_ADDR WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_von_MONFLG_SEL_BIT15TO08_MASK 0x00001F00u                // CR_von_MONFLG_SEL_BIT15TO08[12..8]
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_von_MONFLG_SEL_BIT15TO08_SHFT 8u
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_von_MONFLG_SEL_BIT07TO00_ADDR WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_von_MONFLG_SEL_BIT07TO00_MASK 0x0000001Fu                // CR_von_MONFLG_SEL_BIT07TO00[4..0]
#define WF_TOP_CFG_VLP_WFSYS_VON_MONFLG_SEL_0_CR_von_MONFLG_SEL_BIT07TO00_SHFT 0u

/* =====================================================================================

  ---WFSYS_MCU_MONFLG_SEL_0 (0x81021000 + 0xD0Cu)---

    CR_MCU_MONFLG_SEL[4..0]      - (RW) To select mcu_monflg_out. This CR is only effective when cr_mcu_monflg_ctrl_sel=1
                                     Range 0~31
    RESERVED5[29..5]             - (RO) Reserved bits
    CR_MCU_MONFLG_CTRL_SEL[30]   - (RW) To decide mcu_monflg controlled by host or wf_top_cfg_mcu CR
                                     0: host CR
                                     1: wf_top_cfg_mcu CR
    CR_MCU_MONFLG_EN[31]         - (RW) To enable mcu_monflg_out. This CR is only effective when cr_mcu_monflg_ctrl_sel=1
                                     0: disable
                                     1: enable

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_MCU_MONFLG_SEL_0_CR_MCU_MONFLG_EN_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_MONFLG_SEL_0_CR_MCU_MONFLG_EN_MASK 0x80000000u                // CR_MCU_MONFLG_EN[31]
#define WF_TOP_CFG_VLP_WFSYS_MCU_MONFLG_SEL_0_CR_MCU_MONFLG_EN_SHFT 31u
#define WF_TOP_CFG_VLP_WFSYS_MCU_MONFLG_SEL_0_CR_MCU_MONFLG_CTRL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_MONFLG_SEL_0_CR_MCU_MONFLG_CTRL_SEL_MASK 0x40000000u                // CR_MCU_MONFLG_CTRL_SEL[30]
#define WF_TOP_CFG_VLP_WFSYS_MCU_MONFLG_SEL_0_CR_MCU_MONFLG_CTRL_SEL_SHFT 30u
#define WF_TOP_CFG_VLP_WFSYS_MCU_MONFLG_SEL_0_CR_MCU_MONFLG_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_MCU_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_MCU_MONFLG_SEL_0_CR_MCU_MONFLG_SEL_MASK 0x0000001Fu                // CR_MCU_MONFLG_SEL[4..0]
#define WF_TOP_CFG_VLP_WFSYS_MCU_MONFLG_SEL_0_CR_MCU_MONFLG_SEL_SHFT 0u

/* =====================================================================================

  ---WFSYS_LIT_MONFLG_SEL_0 (0x81021000 + 0xD10u)---

    CR_LIT_MONFLG_SEL[4..0]      - (RW) To select lit_monflg_out. This CR is only effective when cr_lit_monflg_ctrl_sel=1
                                     Range 0~31
    RESERVED5[29..5]             - (RO) Reserved bits
    CR_LIT_MONFLG_CTRL_SEL[30]   - (RW) To decide lit_monflg controlled by host or wf_top_cfg_lit CR
                                     0: host CR
                                     1: wf_top_cfg_lit CR
    CR_LIT_MONFLG_EN[31]         - (RW) To enable lit_monflg_out. This CR is only effective when cr_lit_monflg_ctrl_sel=1
                                     0: disable
                                     1: enable

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WFSYS_LIT_MONFLG_SEL_0_CR_LIT_MONFLG_EN_ADDR WF_TOP_CFG_VLP_WFSYS_LIT_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LIT_MONFLG_SEL_0_CR_LIT_MONFLG_EN_MASK 0x80000000u                // CR_LIT_MONFLG_EN[31]
#define WF_TOP_CFG_VLP_WFSYS_LIT_MONFLG_SEL_0_CR_LIT_MONFLG_EN_SHFT 31u
#define WF_TOP_CFG_VLP_WFSYS_LIT_MONFLG_SEL_0_CR_LIT_MONFLG_CTRL_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_LIT_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LIT_MONFLG_SEL_0_CR_LIT_MONFLG_CTRL_SEL_MASK 0x40000000u                // CR_LIT_MONFLG_CTRL_SEL[30]
#define WF_TOP_CFG_VLP_WFSYS_LIT_MONFLG_SEL_0_CR_LIT_MONFLG_CTRL_SEL_SHFT 30u
#define WF_TOP_CFG_VLP_WFSYS_LIT_MONFLG_SEL_0_CR_LIT_MONFLG_SEL_ADDR WF_TOP_CFG_VLP_WFSYS_LIT_MONFLG_SEL_0_ADDR
#define WF_TOP_CFG_VLP_WFSYS_LIT_MONFLG_SEL_0_CR_LIT_MONFLG_SEL_MASK 0x0000001Fu                // CR_LIT_MONFLG_SEL[4..0]
#define WF_TOP_CFG_VLP_WFSYS_LIT_MONFLG_SEL_0_CR_LIT_MONFLG_SEL_SHFT 0u

/* =====================================================================================

  ---WF_TOP_CFG_VLP_DBG_FLAG_CTRL_0 (0x81021000 + 0xDA0u)---

    CR_WF_TOP_CFG_VLP_DBG_SEL[5..0] - (RW)  xxx 
    RESERVED6[30..6]             - (RO) Reserved bits
    CR_WF_TOP_CFG_VLP_DBG_CTRL_SEL[31] - (RW)  xxx 

 =====================================================================================*/
#define WF_TOP_CFG_VLP_DBG_FLAG_CTRL_0_CR_WF_TOP_CFG_VLP_DBG_CTRL_SEL_ADDR WF_TOP_CFG_VLP_DBG_FLAG_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_DBG_FLAG_CTRL_0_CR_WF_TOP_CFG_VLP_DBG_CTRL_SEL_MASK 0x80000000u                // CR_WF_TOP_CFG_VLP_DBG_CTRL_SEL[31]
#define WF_TOP_CFG_VLP_DBG_FLAG_CTRL_0_CR_WF_TOP_CFG_VLP_DBG_CTRL_SEL_SHFT 31u
#define WF_TOP_CFG_VLP_DBG_FLAG_CTRL_0_CR_WF_TOP_CFG_VLP_DBG_SEL_ADDR WF_TOP_CFG_VLP_DBG_FLAG_CTRL_0_ADDR
#define WF_TOP_CFG_VLP_DBG_FLAG_CTRL_0_CR_WF_TOP_CFG_VLP_DBG_SEL_MASK 0x0000003Fu                // CR_WF_TOP_CFG_VLP_DBG_SEL[5..0]
#define WF_TOP_CFG_VLP_DBG_FLAG_CTRL_0_CR_WF_TOP_CFG_VLP_DBG_SEL_SHFT 0u

/* =====================================================================================

  ---WF_TOP_CFG_VLP_DBG_FLAG_0 (0x81021000 + 0xDA4u)---

    WF_TOP_CFG_VLP_DBG_OUT[31..0] - (RO)  xxx 

 =====================================================================================*/
#define WF_TOP_CFG_VLP_DBG_FLAG_0_WF_TOP_CFG_VLP_DBG_OUT_ADDR  WF_TOP_CFG_VLP_DBG_FLAG_0_ADDR
#define WF_TOP_CFG_VLP_DBG_FLAG_0_WF_TOP_CFG_VLP_DBG_OUT_MASK  0xFFFFFFFFu                // WF_TOP_CFG_VLP_DBG_OUT[31..0]
#define WF_TOP_CFG_VLP_DBG_FLAG_0_WF_TOP_CFG_VLP_DBG_OUT_SHFT  0u

/* =====================================================================================

  ---WF_TOP_APB_DECODER_WAY_EN_0 (0x81021000 + 0xE00u)---

    cr_apb_decoder_way_en[15..0] - (RW) Bus way_en for APB decoder
                                     0: disable (block access)
                                     1: enable (allow access)
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_WAY_EN_0_cr_apb_decoder_way_en_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_WAY_EN_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_WAY_EN_0_cr_apb_decoder_way_en_MASK 0x0000FFFFu                // cr_apb_decoder_way_en[15..0]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_WAY_EN_0_cr_apb_decoder_way_en_SHFT 0u

/* =====================================================================================

  ---WF_TOP_APB_DECODER_BIG_WAY_EN_0 (0x81021000 + 0xE04u)---

    cr_apb_decoder_big_way_en[10..0] - (RW) Bus way_en for APB decoder
                                     0: disable (block access)
                                     1: enable (allow access)
    RESERVED11[31..11]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_WAY_EN_0_cr_apb_decoder_big_way_en_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_WAY_EN_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_WAY_EN_0_cr_apb_decoder_big_way_en_MASK 0x000007FFu                // cr_apb_decoder_big_way_en[10..0]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_WAY_EN_0_cr_apb_decoder_big_way_en_SHFT 0u

/* =====================================================================================

  ---WF_TOP_APB_DECODER_AON_WAY_EN_0 (0x81021000 + 0xE08u)---

    cr_apb_decoder_aon_way_en[15..0] - (RW) Bus way_en for APB decoder
                                     0: disable (block access)
                                     1: enable (allow access)
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_WAY_EN_0_cr_apb_decoder_aon_way_en_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_WAY_EN_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_WAY_EN_0_cr_apb_decoder_aon_way_en_MASK 0x0000FFFFu                // cr_apb_decoder_aon_way_en[15..0]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_WAY_EN_0_cr_apb_decoder_aon_way_en_SHFT 0u

/* =====================================================================================

  ---WF_TOP_APB_DECODER_STATUS_0 (0x81021000 + 0xE10u)---

    ro_apb_decoder_err_paddr[15..0] - (RO)  xxx 
    ro_apb_decoder_ctrl_update[16] - (RO)  xxx 
    ro_apb_decoder_dec_err[17]   - (RO)  xxx 
    ro_apb_decoder_err_psecure_b[18] - (RO)  xxx 
    ro_apb_decoder_err_pwrite[19] - (RO)  xxx 
    ro_apb_decoder_idle[20]      - (RO)  xxx 
    RESERVED21[31..21]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_idle_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_idle_MASK 0x00100000u                // ro_apb_decoder_idle[20]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_idle_SHFT 20u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_err_pwrite_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_err_pwrite_MASK 0x00080000u                // ro_apb_decoder_err_pwrite[19]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_err_pwrite_SHFT 19u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_err_psecure_b_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_err_psecure_b_MASK 0x00040000u                // ro_apb_decoder_err_psecure_b[18]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_err_psecure_b_SHFT 18u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_dec_err_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_dec_err_MASK 0x00020000u                // ro_apb_decoder_dec_err[17]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_dec_err_SHFT 17u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_ctrl_update_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_ctrl_update_MASK 0x00010000u                // ro_apb_decoder_ctrl_update[16]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_ctrl_update_SHFT 16u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_err_paddr_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_err_paddr_MASK 0x0000FFFFu                // ro_apb_decoder_err_paddr[15..0]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_STATUS_0_ro_apb_decoder_err_paddr_SHFT 0u

/* =====================================================================================

  ---WF_TOP_APB_DECODER_BIG_STATUS_0 (0x81021000 + 0xE14u)---

    ro_apb_decoder_big_err_paddr[19..0] - (RO)  xxx 
    ro_apb_decoder_big_ctrl_update[20] - (RO)  xxx 
    ro_apb_decoder_big_dec_err[21] - (RO)  xxx 
    ro_apb_decoder_big_err_psecure_b[22] - (RO)  xxx 
    ro_apb_decoder_big_err_pwrite[23] - (RO)  xxx 
    ro_apb_decoder_big_idle[24]  - (RO)  xxx 
    RESERVED25[31..25]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_idle_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_idle_MASK 0x01000000u                // ro_apb_decoder_big_idle[24]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_idle_SHFT 24u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_err_pwrite_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_err_pwrite_MASK 0x00800000u                // ro_apb_decoder_big_err_pwrite[23]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_err_pwrite_SHFT 23u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_err_psecure_b_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_err_psecure_b_MASK 0x00400000u                // ro_apb_decoder_big_err_psecure_b[22]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_err_psecure_b_SHFT 22u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_dec_err_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_dec_err_MASK 0x00200000u                // ro_apb_decoder_big_dec_err[21]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_dec_err_SHFT 21u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_ctrl_update_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_ctrl_update_MASK 0x00100000u                // ro_apb_decoder_big_ctrl_update[20]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_ctrl_update_SHFT 20u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_err_paddr_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_err_paddr_MASK 0x000FFFFFu                // ro_apb_decoder_big_err_paddr[19..0]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_BIG_STATUS_0_ro_apb_decoder_big_err_paddr_SHFT 0u

/* =====================================================================================

  ---WF_TOP_APB_DECODER_AON_STATUS_0 (0x81021000 + 0xE18u)---

    ro_apb_decoder_aon_err_paddr[15..0] - (RO)  xxx 
    ro_apb_decoder_aon_ctrl_update[16] - (RO)  xxx 
    ro_apb_decoder_aon_dec_err[17] - (RO)  xxx 
    ro_apb_decoder_aon_err_psecure_b[18] - (RO)  xxx 
    ro_apb_decoder_aon_err_pwrite[19] - (RO)  xxx 
    ro_apb_decoder_aon_idle[20]  - (RO)  xxx 
    RESERVED21[31..21]           - (RO) Reserved bits

 =====================================================================================*/
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_idle_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_idle_MASK 0x00100000u                // ro_apb_decoder_aon_idle[20]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_idle_SHFT 20u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_err_pwrite_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_err_pwrite_MASK 0x00080000u                // ro_apb_decoder_aon_err_pwrite[19]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_err_pwrite_SHFT 19u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_err_psecure_b_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_err_psecure_b_MASK 0x00040000u                // ro_apb_decoder_aon_err_psecure_b[18]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_err_psecure_b_SHFT 18u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_dec_err_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_dec_err_MASK 0x00020000u                // ro_apb_decoder_aon_dec_err[17]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_dec_err_SHFT 17u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_ctrl_update_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_ctrl_update_MASK 0x00010000u                // ro_apb_decoder_aon_ctrl_update[16]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_ctrl_update_SHFT 16u
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_err_paddr_ADDR WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ADDR
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_err_paddr_MASK 0x0000FFFFu                // ro_apb_decoder_aon_err_paddr[15..0]
#define WF_TOP_CFG_VLP_WF_TOP_APB_DECODER_AON_STATUS_0_ro_apb_decoder_aon_err_paddr_SHFT 0u

#ifdef __cplusplus
}
#endif

#endif // __WF_TOP_CFG_VLP_REGS_H__
